/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-9-17")
public class Hotel implements org.apache.thrift.TBase<Hotel, Hotel._Fields>, java.io.Serializable, Cloneable, Comparable<Hotel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Hotel");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField GRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("grade", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LOCATED_IN_FIELD_DESC = new org.apache.thrift.protocol.TField("locatedIn", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField HOTEL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("hotelType", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField EMAIL_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("emailAddress", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CHECK_IN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("checkInTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CHECK_OUT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("checkOutTime", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HotelStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HotelTupleSchemeFactory());
  }

  public String name; // required
  public String grade; // required
  public Location locatedIn; // required
  public HotelType hotelType; // required
  public String emailAddress; // optional
  public String description; // optional
  public String checkInTime; // optional
  public String checkOutTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    GRADE((short)2, "grade"),
    LOCATED_IN((short)3, "locatedIn"),
    HOTEL_TYPE((short)4, "hotelType"),
    EMAIL_ADDRESS((short)5, "emailAddress"),
    DESCRIPTION((short)6, "description"),
    CHECK_IN_TIME((short)7, "checkInTime"),
    CHECK_OUT_TIME((short)8, "checkOutTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // GRADE
          return GRADE;
        case 3: // LOCATED_IN
          return LOCATED_IN;
        case 4: // HOTEL_TYPE
          return HOTEL_TYPE;
        case 5: // EMAIL_ADDRESS
          return EMAIL_ADDRESS;
        case 6: // DESCRIPTION
          return DESCRIPTION;
        case 7: // CHECK_IN_TIME
          return CHECK_IN_TIME;
        case 8: // CHECK_OUT_TIME
          return CHECK_OUT_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.EMAIL_ADDRESS,_Fields.DESCRIPTION,_Fields.CHECK_IN_TIME,_Fields.CHECK_OUT_TIME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GRADE, new org.apache.thrift.meta_data.FieldMetaData("grade", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCATED_IN, new org.apache.thrift.meta_data.FieldMetaData("locatedIn", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "Location")));
    tmpMap.put(_Fields.HOTEL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("hotelType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "HotelType")));
    tmpMap.put(_Fields.EMAIL_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("emailAddress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECK_IN_TIME, new org.apache.thrift.meta_data.FieldMetaData("checkInTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECK_OUT_TIME, new org.apache.thrift.meta_data.FieldMetaData("checkOutTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Hotel.class, metaDataMap);
  }

  public Hotel() {
  }

  public Hotel(
    String name,
    String grade,
    Location locatedIn,
    HotelType hotelType)
  {
    this();
    this.name = name;
    this.grade = grade;
    this.locatedIn = locatedIn;
    this.hotelType = hotelType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Hotel(Hotel other) {
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetGrade()) {
      this.grade = other.grade;
    }
    if (other.isSetLocatedIn()) {
      this.locatedIn = other.locatedIn;
    }
    if (other.isSetHotelType()) {
      this.hotelType = other.hotelType;
    }
    if (other.isSetEmailAddress()) {
      this.emailAddress = other.emailAddress;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetCheckInTime()) {
      this.checkInTime = other.checkInTime;
    }
    if (other.isSetCheckOutTime()) {
      this.checkOutTime = other.checkOutTime;
    }
  }

  public Hotel deepCopy() {
    return new Hotel(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.grade = null;
    this.locatedIn = null;
    this.hotelType = null;
    this.emailAddress = null;
    this.description = null;
    this.checkInTime = null;
    this.checkOutTime = null;
  }

  public String getName() {
    return this.name;
  }

  public Hotel setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getGrade() {
    return this.grade;
  }

  public Hotel setGrade(String grade) {
    this.grade = grade;
    return this;
  }

  public void unsetGrade() {
    this.grade = null;
  }

  /** Returns true if field grade is set (has been assigned a value) and false otherwise */
  public boolean isSetGrade() {
    return this.grade != null;
  }

  public void setGradeIsSet(boolean value) {
    if (!value) {
      this.grade = null;
    }
  }

  public Location getLocatedIn() {
    return this.locatedIn;
  }

  public Hotel setLocatedIn(Location locatedIn) {
    this.locatedIn = locatedIn;
    return this;
  }

  public void unsetLocatedIn() {
    this.locatedIn = null;
  }

  /** Returns true if field locatedIn is set (has been assigned a value) and false otherwise */
  public boolean isSetLocatedIn() {
    return this.locatedIn != null;
  }

  public void setLocatedInIsSet(boolean value) {
    if (!value) {
      this.locatedIn = null;
    }
  }

  public HotelType getHotelType() {
    return this.hotelType;
  }

  public Hotel setHotelType(HotelType hotelType) {
    this.hotelType = hotelType;
    return this;
  }

  public void unsetHotelType() {
    this.hotelType = null;
  }

  /** Returns true if field hotelType is set (has been assigned a value) and false otherwise */
  public boolean isSetHotelType() {
    return this.hotelType != null;
  }

  public void setHotelTypeIsSet(boolean value) {
    if (!value) {
      this.hotelType = null;
    }
  }

  public String getEmailAddress() {
    return this.emailAddress;
  }

  public Hotel setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

  public void unsetEmailAddress() {
    this.emailAddress = null;
  }

  /** Returns true if field emailAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetEmailAddress() {
    return this.emailAddress != null;
  }

  public void setEmailAddressIsSet(boolean value) {
    if (!value) {
      this.emailAddress = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public Hotel setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public String getCheckInTime() {
    return this.checkInTime;
  }

  public Hotel setCheckInTime(String checkInTime) {
    this.checkInTime = checkInTime;
    return this;
  }

  public void unsetCheckInTime() {
    this.checkInTime = null;
  }

  /** Returns true if field checkInTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckInTime() {
    return this.checkInTime != null;
  }

  public void setCheckInTimeIsSet(boolean value) {
    if (!value) {
      this.checkInTime = null;
    }
  }

  public String getCheckOutTime() {
    return this.checkOutTime;
  }

  public Hotel setCheckOutTime(String checkOutTime) {
    this.checkOutTime = checkOutTime;
    return this;
  }

  public void unsetCheckOutTime() {
    this.checkOutTime = null;
  }

  /** Returns true if field checkOutTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckOutTime() {
    return this.checkOutTime != null;
  }

  public void setCheckOutTimeIsSet(boolean value) {
    if (!value) {
      this.checkOutTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case GRADE:
      if (value == null) {
        unsetGrade();
      } else {
        setGrade((String)value);
      }
      break;

    case LOCATED_IN:
      if (value == null) {
        unsetLocatedIn();
      } else {
        setLocatedIn((Location)value);
      }
      break;

    case HOTEL_TYPE:
      if (value == null) {
        unsetHotelType();
      } else {
        setHotelType((HotelType)value);
      }
      break;

    case EMAIL_ADDRESS:
      if (value == null) {
        unsetEmailAddress();
      } else {
        setEmailAddress((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case CHECK_IN_TIME:
      if (value == null) {
        unsetCheckInTime();
      } else {
        setCheckInTime((String)value);
      }
      break;

    case CHECK_OUT_TIME:
      if (value == null) {
        unsetCheckOutTime();
      } else {
        setCheckOutTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case GRADE:
      return getGrade();

    case LOCATED_IN:
      return getLocatedIn();

    case HOTEL_TYPE:
      return getHotelType();

    case EMAIL_ADDRESS:
      return getEmailAddress();

    case DESCRIPTION:
      return getDescription();

    case CHECK_IN_TIME:
      return getCheckInTime();

    case CHECK_OUT_TIME:
      return getCheckOutTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case GRADE:
      return isSetGrade();
    case LOCATED_IN:
      return isSetLocatedIn();
    case HOTEL_TYPE:
      return isSetHotelType();
    case EMAIL_ADDRESS:
      return isSetEmailAddress();
    case DESCRIPTION:
      return isSetDescription();
    case CHECK_IN_TIME:
      return isSetCheckInTime();
    case CHECK_OUT_TIME:
      return isSetCheckOutTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Hotel)
      return this.equals((Hotel)that);
    return false;
  }

  public boolean equals(Hotel that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_grade = true && this.isSetGrade();
    boolean that_present_grade = true && that.isSetGrade();
    if (this_present_grade || that_present_grade) {
      if (!(this_present_grade && that_present_grade))
        return false;
      if (!this.grade.equals(that.grade))
        return false;
    }

    boolean this_present_locatedIn = true && this.isSetLocatedIn();
    boolean that_present_locatedIn = true && that.isSetLocatedIn();
    if (this_present_locatedIn || that_present_locatedIn) {
      if (!(this_present_locatedIn && that_present_locatedIn))
        return false;
      if (!this.locatedIn.equals(that.locatedIn))
        return false;
    }

    boolean this_present_hotelType = true && this.isSetHotelType();
    boolean that_present_hotelType = true && that.isSetHotelType();
    if (this_present_hotelType || that_present_hotelType) {
      if (!(this_present_hotelType && that_present_hotelType))
        return false;
      if (!this.hotelType.equals(that.hotelType))
        return false;
    }

    boolean this_present_emailAddress = true && this.isSetEmailAddress();
    boolean that_present_emailAddress = true && that.isSetEmailAddress();
    if (this_present_emailAddress || that_present_emailAddress) {
      if (!(this_present_emailAddress && that_present_emailAddress))
        return false;
      if (!this.emailAddress.equals(that.emailAddress))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_checkInTime = true && this.isSetCheckInTime();
    boolean that_present_checkInTime = true && that.isSetCheckInTime();
    if (this_present_checkInTime || that_present_checkInTime) {
      if (!(this_present_checkInTime && that_present_checkInTime))
        return false;
      if (!this.checkInTime.equals(that.checkInTime))
        return false;
    }

    boolean this_present_checkOutTime = true && this.isSetCheckOutTime();
    boolean that_present_checkOutTime = true && that.isSetCheckOutTime();
    if (this_present_checkOutTime || that_present_checkOutTime) {
      if (!(this_present_checkOutTime && that_present_checkOutTime))
        return false;
      if (!this.checkOutTime.equals(that.checkOutTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_grade = true && (isSetGrade());
    list.add(present_grade);
    if (present_grade)
      list.add(grade);

    boolean present_locatedIn = true && (isSetLocatedIn());
    list.add(present_locatedIn);
    if (present_locatedIn)
      list.add(locatedIn);

    boolean present_hotelType = true && (isSetHotelType());
    list.add(present_hotelType);
    if (present_hotelType)
      list.add(hotelType);

    boolean present_emailAddress = true && (isSetEmailAddress());
    list.add(present_emailAddress);
    if (present_emailAddress)
      list.add(emailAddress);

    boolean present_description = true && (isSetDescription());
    list.add(present_description);
    if (present_description)
      list.add(description);

    boolean present_checkInTime = true && (isSetCheckInTime());
    list.add(present_checkInTime);
    if (present_checkInTime)
      list.add(checkInTime);

    boolean present_checkOutTime = true && (isSetCheckOutTime());
    list.add(present_checkOutTime);
    if (present_checkOutTime)
      list.add(checkOutTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(Hotel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGrade()).compareTo(other.isSetGrade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGrade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grade, other.grade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocatedIn()).compareTo(other.isSetLocatedIn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocatedIn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locatedIn, other.locatedIn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHotelType()).compareTo(other.isSetHotelType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHotelType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hotelType, other.hotelType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmailAddress()).compareTo(other.isSetEmailAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmailAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emailAddress, other.emailAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckInTime()).compareTo(other.isSetCheckInTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckInTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkInTime, other.checkInTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckOutTime()).compareTo(other.isSetCheckOutTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckOutTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkOutTime, other.checkOutTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Hotel(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("grade:");
    if (this.grade == null) {
      sb.append("null");
    } else {
      sb.append(this.grade);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("locatedIn:");
    if (this.locatedIn == null) {
      sb.append("null");
    } else {
      sb.append(this.locatedIn);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hotelType:");
    if (this.hotelType == null) {
      sb.append("null");
    } else {
      sb.append(this.hotelType);
    }
    first = false;
    if (isSetEmailAddress()) {
      if (!first) sb.append(", ");
      sb.append("emailAddress:");
      if (this.emailAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.emailAddress);
      }
      first = false;
    }
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (isSetCheckInTime()) {
      if (!first) sb.append(", ");
      sb.append("checkInTime:");
      if (this.checkInTime == null) {
        sb.append("null");
      } else {
        sb.append(this.checkInTime);
      }
      first = false;
    }
    if (isSetCheckOutTime()) {
      if (!first) sb.append(", ");
      sb.append("checkOutTime:");
      if (this.checkOutTime == null) {
        sb.append("null");
      } else {
        sb.append(this.checkOutTime);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    if (grade == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'grade' was not present! Struct: " + toString());
    }
    if (locatedIn == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'locatedIn' was not present! Struct: " + toString());
    }
    if (hotelType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'hotelType' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HotelStandardSchemeFactory implements SchemeFactory {
    public HotelStandardScheme getScheme() {
      return new HotelStandardScheme();
    }
  }

  private static class HotelStandardScheme extends StandardScheme<Hotel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Hotel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GRADE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.grade = iprot.readString();
              struct.setGradeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOCATED_IN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.locatedIn = new Location();
              struct.locatedIn.read(iprot);
              struct.setLocatedInIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HOTEL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hotelType = new HotelType();
              struct.hotelType.read(iprot);
              struct.setHotelTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EMAIL_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.emailAddress = iprot.readString();
              struct.setEmailAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CHECK_IN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.checkInTime = iprot.readString();
              struct.setCheckInTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CHECK_OUT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.checkOutTime = iprot.readString();
              struct.setCheckOutTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Hotel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.grade != null) {
        oprot.writeFieldBegin(GRADE_FIELD_DESC);
        oprot.writeString(struct.grade);
        oprot.writeFieldEnd();
      }
      if (struct.locatedIn != null) {
        oprot.writeFieldBegin(LOCATED_IN_FIELD_DESC);
        struct.locatedIn.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.hotelType != null) {
        oprot.writeFieldBegin(HOTEL_TYPE_FIELD_DESC);
        struct.hotelType.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.emailAddress != null) {
        if (struct.isSetEmailAddress()) {
          oprot.writeFieldBegin(EMAIL_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.emailAddress);
          oprot.writeFieldEnd();
        }
      }
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.checkInTime != null) {
        if (struct.isSetCheckInTime()) {
          oprot.writeFieldBegin(CHECK_IN_TIME_FIELD_DESC);
          oprot.writeString(struct.checkInTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.checkOutTime != null) {
        if (struct.isSetCheckOutTime()) {
          oprot.writeFieldBegin(CHECK_OUT_TIME_FIELD_DESC);
          oprot.writeString(struct.checkOutTime);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HotelTupleSchemeFactory implements SchemeFactory {
    public HotelTupleScheme getScheme() {
      return new HotelTupleScheme();
    }
  }

  private static class HotelTupleScheme extends TupleScheme<Hotel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Hotel struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.name);
      oprot.writeString(struct.grade);
      struct.locatedIn.write(oprot);
      struct.hotelType.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetEmailAddress()) {
        optionals.set(0);
      }
      if (struct.isSetDescription()) {
        optionals.set(1);
      }
      if (struct.isSetCheckInTime()) {
        optionals.set(2);
      }
      if (struct.isSetCheckOutTime()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetEmailAddress()) {
        oprot.writeString(struct.emailAddress);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetCheckInTime()) {
        oprot.writeString(struct.checkInTime);
      }
      if (struct.isSetCheckOutTime()) {
        oprot.writeString(struct.checkOutTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Hotel struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.grade = iprot.readString();
      struct.setGradeIsSet(true);
      struct.locatedIn = new Location();
      struct.locatedIn.read(iprot);
      struct.setLocatedInIsSet(true);
      struct.hotelType = new HotelType();
      struct.hotelType.read(iprot);
      struct.setHotelTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.emailAddress = iprot.readString();
        struct.setEmailAddressIsSet(true);
      }
      if (incoming.get(1)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.checkInTime = iprot.readString();
        struct.setCheckInTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.checkOutTime = iprot.readString();
        struct.setCheckOutTimeIsSet(true);
      }
    }
  }

}

