/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-9-17")
public class RoomType implements org.apache.thrift.TBase<RoomType, RoomType._Fields>, java.io.Serializable, Cloneable, Comparable<RoomType> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RoomType");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField HOTEL_FIELD_DESC = new org.apache.thrift.protocol.TField("hotel", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField ROOM_RATE_PER_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("roomRatePerDay", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MAX_NUMBER_OF_PEOPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("maxNumberOfPeople", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RoomTypeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RoomTypeTupleSchemeFactory());
  }

  public String name; // required
  public Hotel hotel; // required
  public int roomRatePerDay; // required
  public String description; // optional
  public int maxNumberOfPeople; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    HOTEL((short)2, "hotel"),
    ROOM_RATE_PER_DAY((short)3, "roomRatePerDay"),
    DESCRIPTION((short)4, "description"),
    MAX_NUMBER_OF_PEOPLE((short)5, "maxNumberOfPeople");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // HOTEL
          return HOTEL;
        case 3: // ROOM_RATE_PER_DAY
          return ROOM_RATE_PER_DAY;
        case 4: // DESCRIPTION
          return DESCRIPTION;
        case 5: // MAX_NUMBER_OF_PEOPLE
          return MAX_NUMBER_OF_PEOPLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ROOMRATEPERDAY_ISSET_ID = 0;
  private static final int __MAXNUMBEROFPEOPLE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DESCRIPTION,_Fields.MAX_NUMBER_OF_PEOPLE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOTEL, new org.apache.thrift.meta_data.FieldMetaData("hotel", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Hotel.class)));
    tmpMap.put(_Fields.ROOM_RATE_PER_DAY, new org.apache.thrift.meta_data.FieldMetaData("roomRatePerDay", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAX_NUMBER_OF_PEOPLE, new org.apache.thrift.meta_data.FieldMetaData("maxNumberOfPeople", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RoomType.class, metaDataMap);
  }

  public RoomType() {
  }

  public RoomType(
    String name,
    Hotel hotel,
    int roomRatePerDay)
  {
    this();
    this.name = name;
    this.hotel = hotel;
    this.roomRatePerDay = roomRatePerDay;
    setRoomRatePerDayIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RoomType(RoomType other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetHotel()) {
      this.hotel = new Hotel(other.hotel);
    }
    this.roomRatePerDay = other.roomRatePerDay;
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    this.maxNumberOfPeople = other.maxNumberOfPeople;
  }

  public RoomType deepCopy() {
    return new RoomType(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.hotel = null;
    setRoomRatePerDayIsSet(false);
    this.roomRatePerDay = 0;
    this.description = null;
    setMaxNumberOfPeopleIsSet(false);
    this.maxNumberOfPeople = 0;
  }

  public String getName() {
    return this.name;
  }

  public RoomType setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public Hotel getHotel() {
    return this.hotel;
  }

  public RoomType setHotel(Hotel hotel) {
    this.hotel = hotel;
    return this;
  }

  public void unsetHotel() {
    this.hotel = null;
  }

  /** Returns true if field hotel is set (has been assigned a value) and false otherwise */
  public boolean isSetHotel() {
    return this.hotel != null;
  }

  public void setHotelIsSet(boolean value) {
    if (!value) {
      this.hotel = null;
    }
  }

  public int getRoomRatePerDay() {
    return this.roomRatePerDay;
  }

  public RoomType setRoomRatePerDay(int roomRatePerDay) {
    this.roomRatePerDay = roomRatePerDay;
    setRoomRatePerDayIsSet(true);
    return this;
  }

  public void unsetRoomRatePerDay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROOMRATEPERDAY_ISSET_ID);
  }

  /** Returns true if field roomRatePerDay is set (has been assigned a value) and false otherwise */
  public boolean isSetRoomRatePerDay() {
    return EncodingUtils.testBit(__isset_bitfield, __ROOMRATEPERDAY_ISSET_ID);
  }

  public void setRoomRatePerDayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROOMRATEPERDAY_ISSET_ID, value);
  }

  public String getDescription() {
    return this.description;
  }

  public RoomType setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public int getMaxNumberOfPeople() {
    return this.maxNumberOfPeople;
  }

  public RoomType setMaxNumberOfPeople(int maxNumberOfPeople) {
    this.maxNumberOfPeople = maxNumberOfPeople;
    setMaxNumberOfPeopleIsSet(true);
    return this;
  }

  public void unsetMaxNumberOfPeople() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXNUMBEROFPEOPLE_ISSET_ID);
  }

  /** Returns true if field maxNumberOfPeople is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxNumberOfPeople() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXNUMBEROFPEOPLE_ISSET_ID);
  }

  public void setMaxNumberOfPeopleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXNUMBEROFPEOPLE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case HOTEL:
      if (value == null) {
        unsetHotel();
      } else {
        setHotel((Hotel)value);
      }
      break;

    case ROOM_RATE_PER_DAY:
      if (value == null) {
        unsetRoomRatePerDay();
      } else {
        setRoomRatePerDay((Integer)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case MAX_NUMBER_OF_PEOPLE:
      if (value == null) {
        unsetMaxNumberOfPeople();
      } else {
        setMaxNumberOfPeople((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case HOTEL:
      return getHotel();

    case ROOM_RATE_PER_DAY:
      return Integer.valueOf(getRoomRatePerDay());

    case DESCRIPTION:
      return getDescription();

    case MAX_NUMBER_OF_PEOPLE:
      return Integer.valueOf(getMaxNumberOfPeople());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case HOTEL:
      return isSetHotel();
    case ROOM_RATE_PER_DAY:
      return isSetRoomRatePerDay();
    case DESCRIPTION:
      return isSetDescription();
    case MAX_NUMBER_OF_PEOPLE:
      return isSetMaxNumberOfPeople();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RoomType)
      return this.equals((RoomType)that);
    return false;
  }

  public boolean equals(RoomType that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_hotel = true && this.isSetHotel();
    boolean that_present_hotel = true && that.isSetHotel();
    if (this_present_hotel || that_present_hotel) {
      if (!(this_present_hotel && that_present_hotel))
        return false;
      if (!this.hotel.equals(that.hotel))
        return false;
    }

    boolean this_present_roomRatePerDay = true;
    boolean that_present_roomRatePerDay = true;
    if (this_present_roomRatePerDay || that_present_roomRatePerDay) {
      if (!(this_present_roomRatePerDay && that_present_roomRatePerDay))
        return false;
      if (this.roomRatePerDay != that.roomRatePerDay)
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_maxNumberOfPeople = true && this.isSetMaxNumberOfPeople();
    boolean that_present_maxNumberOfPeople = true && that.isSetMaxNumberOfPeople();
    if (this_present_maxNumberOfPeople || that_present_maxNumberOfPeople) {
      if (!(this_present_maxNumberOfPeople && that_present_maxNumberOfPeople))
        return false;
      if (this.maxNumberOfPeople != that.maxNumberOfPeople)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_hotel = true && (isSetHotel());
    list.add(present_hotel);
    if (present_hotel)
      list.add(hotel);

    boolean present_roomRatePerDay = true;
    list.add(present_roomRatePerDay);
    if (present_roomRatePerDay)
      list.add(roomRatePerDay);

    boolean present_description = true && (isSetDescription());
    list.add(present_description);
    if (present_description)
      list.add(description);

    boolean present_maxNumberOfPeople = true && (isSetMaxNumberOfPeople());
    list.add(present_maxNumberOfPeople);
    if (present_maxNumberOfPeople)
      list.add(maxNumberOfPeople);

    return list.hashCode();
  }

  @Override
  public int compareTo(RoomType other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHotel()).compareTo(other.isSetHotel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHotel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hotel, other.hotel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoomRatePerDay()).compareTo(other.isSetRoomRatePerDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoomRatePerDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomRatePerDay, other.roomRatePerDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxNumberOfPeople()).compareTo(other.isSetMaxNumberOfPeople());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxNumberOfPeople()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxNumberOfPeople, other.maxNumberOfPeople);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RoomType(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hotel:");
    if (this.hotel == null) {
      sb.append("null");
    } else {
      sb.append(this.hotel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("roomRatePerDay:");
    sb.append(this.roomRatePerDay);
    first = false;
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (isSetMaxNumberOfPeople()) {
      if (!first) sb.append(", ");
      sb.append("maxNumberOfPeople:");
      sb.append(this.maxNumberOfPeople);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    if (hotel == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'hotel' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'roomRatePerDay' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (hotel != null) {
      hotel.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RoomTypeStandardSchemeFactory implements SchemeFactory {
    public RoomTypeStandardScheme getScheme() {
      return new RoomTypeStandardScheme();
    }
  }

  private static class RoomTypeStandardScheme extends StandardScheme<RoomType> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RoomType struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HOTEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hotel = new Hotel();
              struct.hotel.read(iprot);
              struct.setHotelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ROOM_RATE_PER_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.roomRatePerDay = iprot.readI32();
              struct.setRoomRatePerDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MAX_NUMBER_OF_PEOPLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxNumberOfPeople = iprot.readI32();
              struct.setMaxNumberOfPeopleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetRoomRatePerDay()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'roomRatePerDay' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RoomType struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.hotel != null) {
        oprot.writeFieldBegin(HOTEL_FIELD_DESC);
        struct.hotel.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ROOM_RATE_PER_DAY_FIELD_DESC);
      oprot.writeI32(struct.roomRatePerDay);
      oprot.writeFieldEnd();
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMaxNumberOfPeople()) {
        oprot.writeFieldBegin(MAX_NUMBER_OF_PEOPLE_FIELD_DESC);
        oprot.writeI32(struct.maxNumberOfPeople);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RoomTypeTupleSchemeFactory implements SchemeFactory {
    public RoomTypeTupleScheme getScheme() {
      return new RoomTypeTupleScheme();
    }
  }

  private static class RoomTypeTupleScheme extends TupleScheme<RoomType> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RoomType struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.name);
      struct.hotel.write(oprot);
      oprot.writeI32(struct.roomRatePerDay);
      BitSet optionals = new BitSet();
      if (struct.isSetDescription()) {
        optionals.set(0);
      }
      if (struct.isSetMaxNumberOfPeople()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetMaxNumberOfPeople()) {
        oprot.writeI32(struct.maxNumberOfPeople);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RoomType struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.hotel = new Hotel();
      struct.hotel.read(iprot);
      struct.setHotelIsSet(true);
      struct.roomRatePerDay = iprot.readI32();
      struct.setRoomRatePerDayIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.maxNumberOfPeople = iprot.readI32();
        struct.setMaxNumberOfPeopleIsSet(true);
      }
    }
  }

}

