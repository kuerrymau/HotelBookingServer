/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-9-17")
public class Booking implements org.apache.thrift.TBase<Booking, Booking._Fields>, java.io.Serializable, Cloneable, Comparable<Booking> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Booking");

  private static final org.apache.thrift.protocol.TField ARRIVAL_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("arrivalDate", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DEPARTURE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("departureDate", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField HOTEL_FIELD_DESC = new org.apache.thrift.protocol.TField("hotel", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField GUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("guest", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField COMMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("comments", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BookingStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BookingTupleSchemeFactory());
  }

  public String arrivalDate; // required
  public String departureDate; // required
  public Hotel hotel; // required
  public Guest guest; // required
  public String comments; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ARRIVAL_DATE((short)1, "arrivalDate"),
    DEPARTURE_DATE((short)2, "departureDate"),
    HOTEL((short)3, "hotel"),
    GUEST((short)4, "guest"),
    COMMENTS((short)5, "comments");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ARRIVAL_DATE
          return ARRIVAL_DATE;
        case 2: // DEPARTURE_DATE
          return DEPARTURE_DATE;
        case 3: // HOTEL
          return HOTEL;
        case 4: // GUEST
          return GUEST;
        case 5: // COMMENTS
          return COMMENTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ARRIVAL_DATE, new org.apache.thrift.meta_data.FieldMetaData("arrivalDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEPARTURE_DATE, new org.apache.thrift.meta_data.FieldMetaData("departureDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOTEL, new org.apache.thrift.meta_data.FieldMetaData("hotel", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "Hotel")));
    tmpMap.put(_Fields.GUEST, new org.apache.thrift.meta_data.FieldMetaData("guest", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "Guest")));
    tmpMap.put(_Fields.COMMENTS, new org.apache.thrift.meta_data.FieldMetaData("comments", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Booking.class, metaDataMap);
  }

  public Booking() {
  }

  public Booking(
    String arrivalDate,
    String departureDate,
    Hotel hotel,
    Guest guest,
    String comments)
  {
    this();
    this.arrivalDate = arrivalDate;
    this.departureDate = departureDate;
    this.hotel = hotel;
    this.guest = guest;
    this.comments = comments;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Booking(Booking other) {
    if (other.isSetArrivalDate()) {
      this.arrivalDate = other.arrivalDate;
    }
    if (other.isSetDepartureDate()) {
      this.departureDate = other.departureDate;
    }
    if (other.isSetHotel()) {
      this.hotel = other.hotel;
    }
    if (other.isSetGuest()) {
      this.guest = other.guest;
    }
    if (other.isSetComments()) {
      this.comments = other.comments;
    }
  }

  public Booking deepCopy() {
    return new Booking(this);
  }

  @Override
  public void clear() {
    this.arrivalDate = null;
    this.departureDate = null;
    this.hotel = null;
    this.guest = null;
    this.comments = null;
  }

  public String getArrivalDate() {
    return this.arrivalDate;
  }

  public Booking setArrivalDate(String arrivalDate) {
    this.arrivalDate = arrivalDate;
    return this;
  }

  public void unsetArrivalDate() {
    this.arrivalDate = null;
  }

  /** Returns true if field arrivalDate is set (has been assigned a value) and false otherwise */
  public boolean isSetArrivalDate() {
    return this.arrivalDate != null;
  }

  public void setArrivalDateIsSet(boolean value) {
    if (!value) {
      this.arrivalDate = null;
    }
  }

  public String getDepartureDate() {
    return this.departureDate;
  }

  public Booking setDepartureDate(String departureDate) {
    this.departureDate = departureDate;
    return this;
  }

  public void unsetDepartureDate() {
    this.departureDate = null;
  }

  /** Returns true if field departureDate is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartureDate() {
    return this.departureDate != null;
  }

  public void setDepartureDateIsSet(boolean value) {
    if (!value) {
      this.departureDate = null;
    }
  }

  public Hotel getHotel() {
    return this.hotel;
  }

  public Booking setHotel(Hotel hotel) {
    this.hotel = hotel;
    return this;
  }

  public void unsetHotel() {
    this.hotel = null;
  }

  /** Returns true if field hotel is set (has been assigned a value) and false otherwise */
  public boolean isSetHotel() {
    return this.hotel != null;
  }

  public void setHotelIsSet(boolean value) {
    if (!value) {
      this.hotel = null;
    }
  }

  public Guest getGuest() {
    return this.guest;
  }

  public Booking setGuest(Guest guest) {
    this.guest = guest;
    return this;
  }

  public void unsetGuest() {
    this.guest = null;
  }

  /** Returns true if field guest is set (has been assigned a value) and false otherwise */
  public boolean isSetGuest() {
    return this.guest != null;
  }

  public void setGuestIsSet(boolean value) {
    if (!value) {
      this.guest = null;
    }
  }

  public String getComments() {
    return this.comments;
  }

  public Booking setComments(String comments) {
    this.comments = comments;
    return this;
  }

  public void unsetComments() {
    this.comments = null;
  }

  /** Returns true if field comments is set (has been assigned a value) and false otherwise */
  public boolean isSetComments() {
    return this.comments != null;
  }

  public void setCommentsIsSet(boolean value) {
    if (!value) {
      this.comments = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ARRIVAL_DATE:
      if (value == null) {
        unsetArrivalDate();
      } else {
        setArrivalDate((String)value);
      }
      break;

    case DEPARTURE_DATE:
      if (value == null) {
        unsetDepartureDate();
      } else {
        setDepartureDate((String)value);
      }
      break;

    case HOTEL:
      if (value == null) {
        unsetHotel();
      } else {
        setHotel((Hotel)value);
      }
      break;

    case GUEST:
      if (value == null) {
        unsetGuest();
      } else {
        setGuest((Guest)value);
      }
      break;

    case COMMENTS:
      if (value == null) {
        unsetComments();
      } else {
        setComments((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ARRIVAL_DATE:
      return getArrivalDate();

    case DEPARTURE_DATE:
      return getDepartureDate();

    case HOTEL:
      return getHotel();

    case GUEST:
      return getGuest();

    case COMMENTS:
      return getComments();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ARRIVAL_DATE:
      return isSetArrivalDate();
    case DEPARTURE_DATE:
      return isSetDepartureDate();
    case HOTEL:
      return isSetHotel();
    case GUEST:
      return isSetGuest();
    case COMMENTS:
      return isSetComments();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Booking)
      return this.equals((Booking)that);
    return false;
  }

  public boolean equals(Booking that) {
    if (that == null)
      return false;

    boolean this_present_arrivalDate = true && this.isSetArrivalDate();
    boolean that_present_arrivalDate = true && that.isSetArrivalDate();
    if (this_present_arrivalDate || that_present_arrivalDate) {
      if (!(this_present_arrivalDate && that_present_arrivalDate))
        return false;
      if (!this.arrivalDate.equals(that.arrivalDate))
        return false;
    }

    boolean this_present_departureDate = true && this.isSetDepartureDate();
    boolean that_present_departureDate = true && that.isSetDepartureDate();
    if (this_present_departureDate || that_present_departureDate) {
      if (!(this_present_departureDate && that_present_departureDate))
        return false;
      if (!this.departureDate.equals(that.departureDate))
        return false;
    }

    boolean this_present_hotel = true && this.isSetHotel();
    boolean that_present_hotel = true && that.isSetHotel();
    if (this_present_hotel || that_present_hotel) {
      if (!(this_present_hotel && that_present_hotel))
        return false;
      if (!this.hotel.equals(that.hotel))
        return false;
    }

    boolean this_present_guest = true && this.isSetGuest();
    boolean that_present_guest = true && that.isSetGuest();
    if (this_present_guest || that_present_guest) {
      if (!(this_present_guest && that_present_guest))
        return false;
      if (!this.guest.equals(that.guest))
        return false;
    }

    boolean this_present_comments = true && this.isSetComments();
    boolean that_present_comments = true && that.isSetComments();
    if (this_present_comments || that_present_comments) {
      if (!(this_present_comments && that_present_comments))
        return false;
      if (!this.comments.equals(that.comments))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_arrivalDate = true && (isSetArrivalDate());
    list.add(present_arrivalDate);
    if (present_arrivalDate)
      list.add(arrivalDate);

    boolean present_departureDate = true && (isSetDepartureDate());
    list.add(present_departureDate);
    if (present_departureDate)
      list.add(departureDate);

    boolean present_hotel = true && (isSetHotel());
    list.add(present_hotel);
    if (present_hotel)
      list.add(hotel);

    boolean present_guest = true && (isSetGuest());
    list.add(present_guest);
    if (present_guest)
      list.add(guest);

    boolean present_comments = true && (isSetComments());
    list.add(present_comments);
    if (present_comments)
      list.add(comments);

    return list.hashCode();
  }

  @Override
  public int compareTo(Booking other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetArrivalDate()).compareTo(other.isSetArrivalDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArrivalDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arrivalDate, other.arrivalDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepartureDate()).compareTo(other.isSetDepartureDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartureDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departureDate, other.departureDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHotel()).compareTo(other.isSetHotel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHotel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hotel, other.hotel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGuest()).compareTo(other.isSetGuest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guest, other.guest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComments()).compareTo(other.isSetComments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comments, other.comments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Booking(");
    boolean first = true;

    sb.append("arrivalDate:");
    if (this.arrivalDate == null) {
      sb.append("null");
    } else {
      sb.append(this.arrivalDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("departureDate:");
    if (this.departureDate == null) {
      sb.append("null");
    } else {
      sb.append(this.departureDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hotel:");
    if (this.hotel == null) {
      sb.append("null");
    } else {
      sb.append(this.hotel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("guest:");
    if (this.guest == null) {
      sb.append("null");
    } else {
      sb.append(this.guest);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("comments:");
    if (this.comments == null) {
      sb.append("null");
    } else {
      sb.append(this.comments);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (arrivalDate == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'arrivalDate' was not present! Struct: " + toString());
    }
    if (departureDate == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'departureDate' was not present! Struct: " + toString());
    }
    if (hotel == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'hotel' was not present! Struct: " + toString());
    }
    if (guest == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'guest' was not present! Struct: " + toString());
    }
    if (comments == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'comments' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BookingStandardSchemeFactory implements SchemeFactory {
    public BookingStandardScheme getScheme() {
      return new BookingStandardScheme();
    }
  }

  private static class BookingStandardScheme extends StandardScheme<Booking> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Booking struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ARRIVAL_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.arrivalDate = iprot.readString();
              struct.setArrivalDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DEPARTURE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.departureDate = iprot.readString();
              struct.setDepartureDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HOTEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hotel = new Hotel();
              struct.hotel.read(iprot);
              struct.setHotelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GUEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.guest = new Guest();
              struct.guest.read(iprot);
              struct.setGuestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comments = iprot.readString();
              struct.setCommentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Booking struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.arrivalDate != null) {
        oprot.writeFieldBegin(ARRIVAL_DATE_FIELD_DESC);
        oprot.writeString(struct.arrivalDate);
        oprot.writeFieldEnd();
      }
      if (struct.departureDate != null) {
        oprot.writeFieldBegin(DEPARTURE_DATE_FIELD_DESC);
        oprot.writeString(struct.departureDate);
        oprot.writeFieldEnd();
      }
      if (struct.hotel != null) {
        oprot.writeFieldBegin(HOTEL_FIELD_DESC);
        struct.hotel.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.guest != null) {
        oprot.writeFieldBegin(GUEST_FIELD_DESC);
        struct.guest.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.comments != null) {
        oprot.writeFieldBegin(COMMENTS_FIELD_DESC);
        oprot.writeString(struct.comments);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BookingTupleSchemeFactory implements SchemeFactory {
    public BookingTupleScheme getScheme() {
      return new BookingTupleScheme();
    }
  }

  private static class BookingTupleScheme extends TupleScheme<Booking> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Booking struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.arrivalDate);
      oprot.writeString(struct.departureDate);
      struct.hotel.write(oprot);
      struct.guest.write(oprot);
      oprot.writeString(struct.comments);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Booking struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.arrivalDate = iprot.readString();
      struct.setArrivalDateIsSet(true);
      struct.departureDate = iprot.readString();
      struct.setDepartureDateIsSet(true);
      struct.hotel = new Hotel();
      struct.hotel.read(iprot);
      struct.setHotelIsSet(true);
      struct.guest = new Guest();
      struct.guest.read(iprot);
      struct.setGuestIsSet(true);
      struct.comments = iprot.readString();
      struct.setCommentsIsSet(true);
    }
  }

}

