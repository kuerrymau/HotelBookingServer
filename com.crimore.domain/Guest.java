/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-9-17")
public class Guest implements org.apache.thrift.TBase<Guest, Guest._Fields>, java.io.Serializable, Cloneable, Comparable<Guest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Guest");

  private static final org.apache.thrift.protocol.TField FIRST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("firstName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SURNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("surname", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EMAIL_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("emailAddress", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TELEPHONE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("telephoneNumber", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DEBIT_CARD_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("debitCardNumber", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DEBIT_CARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("debitCardType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField DEBIT_CARD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("debitCardName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField DEBIT_CARD_EXPIRY_MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("debitCardExpiryMonth", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField DEBIT_CARD_EXPIRY_YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("debitCardExpiryYear", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GuestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GuestTupleSchemeFactory());
  }

  public String firstName; // required
  public String surname; // required
  public String emailAddress; // optional
  public String telephoneNumber; // optional
  public String debitCardNumber; // optional
  /**
   * 
   * @see DebitCardType
   */
  public DebitCardType debitCardType; // optional
  public String debitCardName; // optional
  public int debitCardExpiryMonth; // optional
  public int debitCardExpiryYear; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIRST_NAME((short)1, "firstName"),
    SURNAME((short)2, "surname"),
    EMAIL_ADDRESS((short)3, "emailAddress"),
    TELEPHONE_NUMBER((short)4, "telephoneNumber"),
    DEBIT_CARD_NUMBER((short)5, "debitCardNumber"),
    /**
     * 
     * @see DebitCardType
     */
    DEBIT_CARD_TYPE((short)6, "debitCardType"),
    DEBIT_CARD_NAME((short)7, "debitCardName"),
    DEBIT_CARD_EXPIRY_MONTH((short)8, "debitCardExpiryMonth"),
    DEBIT_CARD_EXPIRY_YEAR((short)9, "debitCardExpiryYear");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIRST_NAME
          return FIRST_NAME;
        case 2: // SURNAME
          return SURNAME;
        case 3: // EMAIL_ADDRESS
          return EMAIL_ADDRESS;
        case 4: // TELEPHONE_NUMBER
          return TELEPHONE_NUMBER;
        case 5: // DEBIT_CARD_NUMBER
          return DEBIT_CARD_NUMBER;
        case 6: // DEBIT_CARD_TYPE
          return DEBIT_CARD_TYPE;
        case 7: // DEBIT_CARD_NAME
          return DEBIT_CARD_NAME;
        case 8: // DEBIT_CARD_EXPIRY_MONTH
          return DEBIT_CARD_EXPIRY_MONTH;
        case 9: // DEBIT_CARD_EXPIRY_YEAR
          return DEBIT_CARD_EXPIRY_YEAR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DEBITCARDEXPIRYMONTH_ISSET_ID = 0;
  private static final int __DEBITCARDEXPIRYYEAR_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.EMAIL_ADDRESS,_Fields.TELEPHONE_NUMBER,_Fields.DEBIT_CARD_NUMBER,_Fields.DEBIT_CARD_TYPE,_Fields.DEBIT_CARD_NAME,_Fields.DEBIT_CARD_EXPIRY_MONTH,_Fields.DEBIT_CARD_EXPIRY_YEAR};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIRST_NAME, new org.apache.thrift.meta_data.FieldMetaData("firstName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SURNAME, new org.apache.thrift.meta_data.FieldMetaData("surname", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("emailAddress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TELEPHONE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("telephoneNumber", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEBIT_CARD_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("debitCardNumber", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEBIT_CARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("debitCardType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DebitCardType.class)));
    tmpMap.put(_Fields.DEBIT_CARD_NAME, new org.apache.thrift.meta_data.FieldMetaData("debitCardName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEBIT_CARD_EXPIRY_MONTH, new org.apache.thrift.meta_data.FieldMetaData("debitCardExpiryMonth", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEBIT_CARD_EXPIRY_YEAR, new org.apache.thrift.meta_data.FieldMetaData("debitCardExpiryYear", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Guest.class, metaDataMap);
  }

  public Guest() {
  }

  public Guest(
    String firstName,
    String surname)
  {
    this();
    this.firstName = firstName;
    this.surname = surname;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Guest(Guest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFirstName()) {
      this.firstName = other.firstName;
    }
    if (other.isSetSurname()) {
      this.surname = other.surname;
    }
    if (other.isSetEmailAddress()) {
      this.emailAddress = other.emailAddress;
    }
    if (other.isSetTelephoneNumber()) {
      this.telephoneNumber = other.telephoneNumber;
    }
    if (other.isSetDebitCardNumber()) {
      this.debitCardNumber = other.debitCardNumber;
    }
    if (other.isSetDebitCardType()) {
      this.debitCardType = other.debitCardType;
    }
    if (other.isSetDebitCardName()) {
      this.debitCardName = other.debitCardName;
    }
    this.debitCardExpiryMonth = other.debitCardExpiryMonth;
    this.debitCardExpiryYear = other.debitCardExpiryYear;
  }

  public Guest deepCopy() {
    return new Guest(this);
  }

  @Override
  public void clear() {
    this.firstName = null;
    this.surname = null;
    this.emailAddress = null;
    this.telephoneNumber = null;
    this.debitCardNumber = null;
    this.debitCardType = null;
    this.debitCardName = null;
    setDebitCardExpiryMonthIsSet(false);
    this.debitCardExpiryMonth = 0;
    setDebitCardExpiryYearIsSet(false);
    this.debitCardExpiryYear = 0;
  }

  public String getFirstName() {
    return this.firstName;
  }

  public Guest setFirstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  public void unsetFirstName() {
    this.firstName = null;
  }

  /** Returns true if field firstName is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstName() {
    return this.firstName != null;
  }

  public void setFirstNameIsSet(boolean value) {
    if (!value) {
      this.firstName = null;
    }
  }

  public String getSurname() {
    return this.surname;
  }

  public Guest setSurname(String surname) {
    this.surname = surname;
    return this;
  }

  public void unsetSurname() {
    this.surname = null;
  }

  /** Returns true if field surname is set (has been assigned a value) and false otherwise */
  public boolean isSetSurname() {
    return this.surname != null;
  }

  public void setSurnameIsSet(boolean value) {
    if (!value) {
      this.surname = null;
    }
  }

  public String getEmailAddress() {
    return this.emailAddress;
  }

  public Guest setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

  public void unsetEmailAddress() {
    this.emailAddress = null;
  }

  /** Returns true if field emailAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetEmailAddress() {
    return this.emailAddress != null;
  }

  public void setEmailAddressIsSet(boolean value) {
    if (!value) {
      this.emailAddress = null;
    }
  }

  public String getTelephoneNumber() {
    return this.telephoneNumber;
  }

  public Guest setTelephoneNumber(String telephoneNumber) {
    this.telephoneNumber = telephoneNumber;
    return this;
  }

  public void unsetTelephoneNumber() {
    this.telephoneNumber = null;
  }

  /** Returns true if field telephoneNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetTelephoneNumber() {
    return this.telephoneNumber != null;
  }

  public void setTelephoneNumberIsSet(boolean value) {
    if (!value) {
      this.telephoneNumber = null;
    }
  }

  public String getDebitCardNumber() {
    return this.debitCardNumber;
  }

  public Guest setDebitCardNumber(String debitCardNumber) {
    this.debitCardNumber = debitCardNumber;
    return this;
  }

  public void unsetDebitCardNumber() {
    this.debitCardNumber = null;
  }

  /** Returns true if field debitCardNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetDebitCardNumber() {
    return this.debitCardNumber != null;
  }

  public void setDebitCardNumberIsSet(boolean value) {
    if (!value) {
      this.debitCardNumber = null;
    }
  }

  /**
   * 
   * @see DebitCardType
   */
  public DebitCardType getDebitCardType() {
    return this.debitCardType;
  }

  /**
   * 
   * @see DebitCardType
   */
  public Guest setDebitCardType(DebitCardType debitCardType) {
    this.debitCardType = debitCardType;
    return this;
  }

  public void unsetDebitCardType() {
    this.debitCardType = null;
  }

  /** Returns true if field debitCardType is set (has been assigned a value) and false otherwise */
  public boolean isSetDebitCardType() {
    return this.debitCardType != null;
  }

  public void setDebitCardTypeIsSet(boolean value) {
    if (!value) {
      this.debitCardType = null;
    }
  }

  public String getDebitCardName() {
    return this.debitCardName;
  }

  public Guest setDebitCardName(String debitCardName) {
    this.debitCardName = debitCardName;
    return this;
  }

  public void unsetDebitCardName() {
    this.debitCardName = null;
  }

  /** Returns true if field debitCardName is set (has been assigned a value) and false otherwise */
  public boolean isSetDebitCardName() {
    return this.debitCardName != null;
  }

  public void setDebitCardNameIsSet(boolean value) {
    if (!value) {
      this.debitCardName = null;
    }
  }

  public int getDebitCardExpiryMonth() {
    return this.debitCardExpiryMonth;
  }

  public Guest setDebitCardExpiryMonth(int debitCardExpiryMonth) {
    this.debitCardExpiryMonth = debitCardExpiryMonth;
    setDebitCardExpiryMonthIsSet(true);
    return this;
  }

  public void unsetDebitCardExpiryMonth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEBITCARDEXPIRYMONTH_ISSET_ID);
  }

  /** Returns true if field debitCardExpiryMonth is set (has been assigned a value) and false otherwise */
  public boolean isSetDebitCardExpiryMonth() {
    return EncodingUtils.testBit(__isset_bitfield, __DEBITCARDEXPIRYMONTH_ISSET_ID);
  }

  public void setDebitCardExpiryMonthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEBITCARDEXPIRYMONTH_ISSET_ID, value);
  }

  public int getDebitCardExpiryYear() {
    return this.debitCardExpiryYear;
  }

  public Guest setDebitCardExpiryYear(int debitCardExpiryYear) {
    this.debitCardExpiryYear = debitCardExpiryYear;
    setDebitCardExpiryYearIsSet(true);
    return this;
  }

  public void unsetDebitCardExpiryYear() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEBITCARDEXPIRYYEAR_ISSET_ID);
  }

  /** Returns true if field debitCardExpiryYear is set (has been assigned a value) and false otherwise */
  public boolean isSetDebitCardExpiryYear() {
    return EncodingUtils.testBit(__isset_bitfield, __DEBITCARDEXPIRYYEAR_ISSET_ID);
  }

  public void setDebitCardExpiryYearIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEBITCARDEXPIRYYEAR_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FIRST_NAME:
      if (value == null) {
        unsetFirstName();
      } else {
        setFirstName((String)value);
      }
      break;

    case SURNAME:
      if (value == null) {
        unsetSurname();
      } else {
        setSurname((String)value);
      }
      break;

    case EMAIL_ADDRESS:
      if (value == null) {
        unsetEmailAddress();
      } else {
        setEmailAddress((String)value);
      }
      break;

    case TELEPHONE_NUMBER:
      if (value == null) {
        unsetTelephoneNumber();
      } else {
        setTelephoneNumber((String)value);
      }
      break;

    case DEBIT_CARD_NUMBER:
      if (value == null) {
        unsetDebitCardNumber();
      } else {
        setDebitCardNumber((String)value);
      }
      break;

    case DEBIT_CARD_TYPE:
      if (value == null) {
        unsetDebitCardType();
      } else {
        setDebitCardType((DebitCardType)value);
      }
      break;

    case DEBIT_CARD_NAME:
      if (value == null) {
        unsetDebitCardName();
      } else {
        setDebitCardName((String)value);
      }
      break;

    case DEBIT_CARD_EXPIRY_MONTH:
      if (value == null) {
        unsetDebitCardExpiryMonth();
      } else {
        setDebitCardExpiryMonth((Integer)value);
      }
      break;

    case DEBIT_CARD_EXPIRY_YEAR:
      if (value == null) {
        unsetDebitCardExpiryYear();
      } else {
        setDebitCardExpiryYear((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FIRST_NAME:
      return getFirstName();

    case SURNAME:
      return getSurname();

    case EMAIL_ADDRESS:
      return getEmailAddress();

    case TELEPHONE_NUMBER:
      return getTelephoneNumber();

    case DEBIT_CARD_NUMBER:
      return getDebitCardNumber();

    case DEBIT_CARD_TYPE:
      return getDebitCardType();

    case DEBIT_CARD_NAME:
      return getDebitCardName();

    case DEBIT_CARD_EXPIRY_MONTH:
      return Integer.valueOf(getDebitCardExpiryMonth());

    case DEBIT_CARD_EXPIRY_YEAR:
      return Integer.valueOf(getDebitCardExpiryYear());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FIRST_NAME:
      return isSetFirstName();
    case SURNAME:
      return isSetSurname();
    case EMAIL_ADDRESS:
      return isSetEmailAddress();
    case TELEPHONE_NUMBER:
      return isSetTelephoneNumber();
    case DEBIT_CARD_NUMBER:
      return isSetDebitCardNumber();
    case DEBIT_CARD_TYPE:
      return isSetDebitCardType();
    case DEBIT_CARD_NAME:
      return isSetDebitCardName();
    case DEBIT_CARD_EXPIRY_MONTH:
      return isSetDebitCardExpiryMonth();
    case DEBIT_CARD_EXPIRY_YEAR:
      return isSetDebitCardExpiryYear();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Guest)
      return this.equals((Guest)that);
    return false;
  }

  public boolean equals(Guest that) {
    if (that == null)
      return false;

    boolean this_present_firstName = true && this.isSetFirstName();
    boolean that_present_firstName = true && that.isSetFirstName();
    if (this_present_firstName || that_present_firstName) {
      if (!(this_present_firstName && that_present_firstName))
        return false;
      if (!this.firstName.equals(that.firstName))
        return false;
    }

    boolean this_present_surname = true && this.isSetSurname();
    boolean that_present_surname = true && that.isSetSurname();
    if (this_present_surname || that_present_surname) {
      if (!(this_present_surname && that_present_surname))
        return false;
      if (!this.surname.equals(that.surname))
        return false;
    }

    boolean this_present_emailAddress = true && this.isSetEmailAddress();
    boolean that_present_emailAddress = true && that.isSetEmailAddress();
    if (this_present_emailAddress || that_present_emailAddress) {
      if (!(this_present_emailAddress && that_present_emailAddress))
        return false;
      if (!this.emailAddress.equals(that.emailAddress))
        return false;
    }

    boolean this_present_telephoneNumber = true && this.isSetTelephoneNumber();
    boolean that_present_telephoneNumber = true && that.isSetTelephoneNumber();
    if (this_present_telephoneNumber || that_present_telephoneNumber) {
      if (!(this_present_telephoneNumber && that_present_telephoneNumber))
        return false;
      if (!this.telephoneNumber.equals(that.telephoneNumber))
        return false;
    }

    boolean this_present_debitCardNumber = true && this.isSetDebitCardNumber();
    boolean that_present_debitCardNumber = true && that.isSetDebitCardNumber();
    if (this_present_debitCardNumber || that_present_debitCardNumber) {
      if (!(this_present_debitCardNumber && that_present_debitCardNumber))
        return false;
      if (!this.debitCardNumber.equals(that.debitCardNumber))
        return false;
    }

    boolean this_present_debitCardType = true && this.isSetDebitCardType();
    boolean that_present_debitCardType = true && that.isSetDebitCardType();
    if (this_present_debitCardType || that_present_debitCardType) {
      if (!(this_present_debitCardType && that_present_debitCardType))
        return false;
      if (!this.debitCardType.equals(that.debitCardType))
        return false;
    }

    boolean this_present_debitCardName = true && this.isSetDebitCardName();
    boolean that_present_debitCardName = true && that.isSetDebitCardName();
    if (this_present_debitCardName || that_present_debitCardName) {
      if (!(this_present_debitCardName && that_present_debitCardName))
        return false;
      if (!this.debitCardName.equals(that.debitCardName))
        return false;
    }

    boolean this_present_debitCardExpiryMonth = true && this.isSetDebitCardExpiryMonth();
    boolean that_present_debitCardExpiryMonth = true && that.isSetDebitCardExpiryMonth();
    if (this_present_debitCardExpiryMonth || that_present_debitCardExpiryMonth) {
      if (!(this_present_debitCardExpiryMonth && that_present_debitCardExpiryMonth))
        return false;
      if (this.debitCardExpiryMonth != that.debitCardExpiryMonth)
        return false;
    }

    boolean this_present_debitCardExpiryYear = true && this.isSetDebitCardExpiryYear();
    boolean that_present_debitCardExpiryYear = true && that.isSetDebitCardExpiryYear();
    if (this_present_debitCardExpiryYear || that_present_debitCardExpiryYear) {
      if (!(this_present_debitCardExpiryYear && that_present_debitCardExpiryYear))
        return false;
      if (this.debitCardExpiryYear != that.debitCardExpiryYear)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_firstName = true && (isSetFirstName());
    list.add(present_firstName);
    if (present_firstName)
      list.add(firstName);

    boolean present_surname = true && (isSetSurname());
    list.add(present_surname);
    if (present_surname)
      list.add(surname);

    boolean present_emailAddress = true && (isSetEmailAddress());
    list.add(present_emailAddress);
    if (present_emailAddress)
      list.add(emailAddress);

    boolean present_telephoneNumber = true && (isSetTelephoneNumber());
    list.add(present_telephoneNumber);
    if (present_telephoneNumber)
      list.add(telephoneNumber);

    boolean present_debitCardNumber = true && (isSetDebitCardNumber());
    list.add(present_debitCardNumber);
    if (present_debitCardNumber)
      list.add(debitCardNumber);

    boolean present_debitCardType = true && (isSetDebitCardType());
    list.add(present_debitCardType);
    if (present_debitCardType)
      list.add(debitCardType.getValue());

    boolean present_debitCardName = true && (isSetDebitCardName());
    list.add(present_debitCardName);
    if (present_debitCardName)
      list.add(debitCardName);

    boolean present_debitCardExpiryMonth = true && (isSetDebitCardExpiryMonth());
    list.add(present_debitCardExpiryMonth);
    if (present_debitCardExpiryMonth)
      list.add(debitCardExpiryMonth);

    boolean present_debitCardExpiryYear = true && (isSetDebitCardExpiryYear());
    list.add(present_debitCardExpiryYear);
    if (present_debitCardExpiryYear)
      list.add(debitCardExpiryYear);

    return list.hashCode();
  }

  @Override
  public int compareTo(Guest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFirstName()).compareTo(other.isSetFirstName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstName, other.firstName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSurname()).compareTo(other.isSetSurname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSurname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.surname, other.surname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmailAddress()).compareTo(other.isSetEmailAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmailAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emailAddress, other.emailAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTelephoneNumber()).compareTo(other.isSetTelephoneNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTelephoneNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.telephoneNumber, other.telephoneNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebitCardNumber()).compareTo(other.isSetDebitCardNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebitCardNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debitCardNumber, other.debitCardNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebitCardType()).compareTo(other.isSetDebitCardType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebitCardType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debitCardType, other.debitCardType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebitCardName()).compareTo(other.isSetDebitCardName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebitCardName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debitCardName, other.debitCardName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebitCardExpiryMonth()).compareTo(other.isSetDebitCardExpiryMonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebitCardExpiryMonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debitCardExpiryMonth, other.debitCardExpiryMonth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebitCardExpiryYear()).compareTo(other.isSetDebitCardExpiryYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebitCardExpiryYear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debitCardExpiryYear, other.debitCardExpiryYear);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Guest(");
    boolean first = true;

    sb.append("firstName:");
    if (this.firstName == null) {
      sb.append("null");
    } else {
      sb.append(this.firstName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("surname:");
    if (this.surname == null) {
      sb.append("null");
    } else {
      sb.append(this.surname);
    }
    first = false;
    if (isSetEmailAddress()) {
      if (!first) sb.append(", ");
      sb.append("emailAddress:");
      if (this.emailAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.emailAddress);
      }
      first = false;
    }
    if (isSetTelephoneNumber()) {
      if (!first) sb.append(", ");
      sb.append("telephoneNumber:");
      if (this.telephoneNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.telephoneNumber);
      }
      first = false;
    }
    if (isSetDebitCardNumber()) {
      if (!first) sb.append(", ");
      sb.append("debitCardNumber:");
      if (this.debitCardNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.debitCardNumber);
      }
      first = false;
    }
    if (isSetDebitCardType()) {
      if (!first) sb.append(", ");
      sb.append("debitCardType:");
      if (this.debitCardType == null) {
        sb.append("null");
      } else {
        sb.append(this.debitCardType);
      }
      first = false;
    }
    if (isSetDebitCardName()) {
      if (!first) sb.append(", ");
      sb.append("debitCardName:");
      if (this.debitCardName == null) {
        sb.append("null");
      } else {
        sb.append(this.debitCardName);
      }
      first = false;
    }
    if (isSetDebitCardExpiryMonth()) {
      if (!first) sb.append(", ");
      sb.append("debitCardExpiryMonth:");
      sb.append(this.debitCardExpiryMonth);
      first = false;
    }
    if (isSetDebitCardExpiryYear()) {
      if (!first) sb.append(", ");
      sb.append("debitCardExpiryYear:");
      sb.append(this.debitCardExpiryYear);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (firstName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'firstName' was not present! Struct: " + toString());
    }
    if (surname == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'surname' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GuestStandardSchemeFactory implements SchemeFactory {
    public GuestStandardScheme getScheme() {
      return new GuestStandardScheme();
    }
  }

  private static class GuestStandardScheme extends StandardScheme<Guest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Guest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIRST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.firstName = iprot.readString();
              struct.setFirstNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SURNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.surname = iprot.readString();
              struct.setSurnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EMAIL_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.emailAddress = iprot.readString();
              struct.setEmailAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TELEPHONE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.telephoneNumber = iprot.readString();
              struct.setTelephoneNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEBIT_CARD_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.debitCardNumber = iprot.readString();
              struct.setDebitCardNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEBIT_CARD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.debitCardType = DebitCardType.findByValue(iprot.readI32());
              struct.setDebitCardTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DEBIT_CARD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.debitCardName = iprot.readString();
              struct.setDebitCardNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DEBIT_CARD_EXPIRY_MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.debitCardExpiryMonth = iprot.readI32();
              struct.setDebitCardExpiryMonthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DEBIT_CARD_EXPIRY_YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.debitCardExpiryYear = iprot.readI32();
              struct.setDebitCardExpiryYearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Guest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.firstName != null) {
        oprot.writeFieldBegin(FIRST_NAME_FIELD_DESC);
        oprot.writeString(struct.firstName);
        oprot.writeFieldEnd();
      }
      if (struct.surname != null) {
        oprot.writeFieldBegin(SURNAME_FIELD_DESC);
        oprot.writeString(struct.surname);
        oprot.writeFieldEnd();
      }
      if (struct.emailAddress != null) {
        if (struct.isSetEmailAddress()) {
          oprot.writeFieldBegin(EMAIL_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.emailAddress);
          oprot.writeFieldEnd();
        }
      }
      if (struct.telephoneNumber != null) {
        if (struct.isSetTelephoneNumber()) {
          oprot.writeFieldBegin(TELEPHONE_NUMBER_FIELD_DESC);
          oprot.writeString(struct.telephoneNumber);
          oprot.writeFieldEnd();
        }
      }
      if (struct.debitCardNumber != null) {
        if (struct.isSetDebitCardNumber()) {
          oprot.writeFieldBegin(DEBIT_CARD_NUMBER_FIELD_DESC);
          oprot.writeString(struct.debitCardNumber);
          oprot.writeFieldEnd();
        }
      }
      if (struct.debitCardType != null) {
        if (struct.isSetDebitCardType()) {
          oprot.writeFieldBegin(DEBIT_CARD_TYPE_FIELD_DESC);
          oprot.writeI32(struct.debitCardType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.debitCardName != null) {
        if (struct.isSetDebitCardName()) {
          oprot.writeFieldBegin(DEBIT_CARD_NAME_FIELD_DESC);
          oprot.writeString(struct.debitCardName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDebitCardExpiryMonth()) {
        oprot.writeFieldBegin(DEBIT_CARD_EXPIRY_MONTH_FIELD_DESC);
        oprot.writeI32(struct.debitCardExpiryMonth);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDebitCardExpiryYear()) {
        oprot.writeFieldBegin(DEBIT_CARD_EXPIRY_YEAR_FIELD_DESC);
        oprot.writeI32(struct.debitCardExpiryYear);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GuestTupleSchemeFactory implements SchemeFactory {
    public GuestTupleScheme getScheme() {
      return new GuestTupleScheme();
    }
  }

  private static class GuestTupleScheme extends TupleScheme<Guest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Guest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.firstName);
      oprot.writeString(struct.surname);
      BitSet optionals = new BitSet();
      if (struct.isSetEmailAddress()) {
        optionals.set(0);
      }
      if (struct.isSetTelephoneNumber()) {
        optionals.set(1);
      }
      if (struct.isSetDebitCardNumber()) {
        optionals.set(2);
      }
      if (struct.isSetDebitCardType()) {
        optionals.set(3);
      }
      if (struct.isSetDebitCardName()) {
        optionals.set(4);
      }
      if (struct.isSetDebitCardExpiryMonth()) {
        optionals.set(5);
      }
      if (struct.isSetDebitCardExpiryYear()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetEmailAddress()) {
        oprot.writeString(struct.emailAddress);
      }
      if (struct.isSetTelephoneNumber()) {
        oprot.writeString(struct.telephoneNumber);
      }
      if (struct.isSetDebitCardNumber()) {
        oprot.writeString(struct.debitCardNumber);
      }
      if (struct.isSetDebitCardType()) {
        oprot.writeI32(struct.debitCardType.getValue());
      }
      if (struct.isSetDebitCardName()) {
        oprot.writeString(struct.debitCardName);
      }
      if (struct.isSetDebitCardExpiryMonth()) {
        oprot.writeI32(struct.debitCardExpiryMonth);
      }
      if (struct.isSetDebitCardExpiryYear()) {
        oprot.writeI32(struct.debitCardExpiryYear);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Guest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.firstName = iprot.readString();
      struct.setFirstNameIsSet(true);
      struct.surname = iprot.readString();
      struct.setSurnameIsSet(true);
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.emailAddress = iprot.readString();
        struct.setEmailAddressIsSet(true);
      }
      if (incoming.get(1)) {
        struct.telephoneNumber = iprot.readString();
        struct.setTelephoneNumberIsSet(true);
      }
      if (incoming.get(2)) {
        struct.debitCardNumber = iprot.readString();
        struct.setDebitCardNumberIsSet(true);
      }
      if (incoming.get(3)) {
        struct.debitCardType = DebitCardType.findByValue(iprot.readI32());
        struct.setDebitCardTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.debitCardName = iprot.readString();
        struct.setDebitCardNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.debitCardExpiryMonth = iprot.readI32();
        struct.setDebitCardExpiryMonthIsSet(true);
      }
      if (incoming.get(6)) {
        struct.debitCardExpiryYear = iprot.readI32();
        struct.setDebitCardExpiryYearIsSet(true);
      }
    }
  }

}

