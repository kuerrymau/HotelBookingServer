/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-9-17")
public class BookingManager {

  public interface Iface {

    public Booking makeABooking(Hotel hotel, String arrivalDate, String departureDate, Guest guest, RoomType roomType) throws org.apache.thrift.TException;

    public void cancelABooking(Booking booking) throws org.apache.thrift.TException;

    public void updateBooking(Booking booking) throws org.apache.thrift.TException;

    public void deleteBookingRoom(Booking booking) throws org.apache.thrift.TException;

    public BookingRoom makeBookingRoom(RoomType roomType, Booking booking, Guest guest) throws org.apache.thrift.TException;

    public Hotel createHotel(String name, Location location, HotelType hotelType) throws org.apache.thrift.TException;

    public Location createLocation(String name) throws org.apache.thrift.TException;

    public HotelType createHotelType(String hotelTypeName) throws org.apache.thrift.TException;

    public RoomType createRoomType(String name, Hotel hotel, double roomRatePerDay, int maxNumberOfPeople) throws org.apache.thrift.TException;

    public Guest createGuest(String firstName, String surname) throws org.apache.thrift.TException;

    public List<RoomType> findAvailableRoomsInLocation() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void makeABooking(Hotel hotel, String arrivalDate, String departureDate, Guest guest, RoomType roomType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void cancelABooking(Booking booking, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateBooking(Booking booking, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteBookingRoom(Booking booking, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void makeBookingRoom(RoomType roomType, Booking booking, Guest guest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createHotel(String name, Location location, HotelType hotelType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createLocation(String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createHotelType(String hotelTypeName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createRoomType(String name, Hotel hotel, double roomRatePerDay, int maxNumberOfPeople, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createGuest(String firstName, String surname, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findAvailableRoomsInLocation(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Booking makeABooking(Hotel hotel, String arrivalDate, String departureDate, Guest guest, RoomType roomType) throws org.apache.thrift.TException
    {
      send_makeABooking(hotel, arrivalDate, departureDate, guest, roomType);
      return recv_makeABooking();
    }

    public void send_makeABooking(Hotel hotel, String arrivalDate, String departureDate, Guest guest, RoomType roomType) throws org.apache.thrift.TException
    {
      makeABooking_args args = new makeABooking_args();
      args.setHotel(hotel);
      args.setArrivalDate(arrivalDate);
      args.setDepartureDate(departureDate);
      args.setGuest(guest);
      args.setRoomType(roomType);
      sendBase("makeABooking", args);
    }

    public Booking recv_makeABooking() throws org.apache.thrift.TException
    {
      makeABooking_result result = new makeABooking_result();
      receiveBase(result, "makeABooking");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "makeABooking failed: unknown result");
    }

    public void cancelABooking(Booking booking) throws org.apache.thrift.TException
    {
      send_cancelABooking(booking);
      recv_cancelABooking();
    }

    public void send_cancelABooking(Booking booking) throws org.apache.thrift.TException
    {
      cancelABooking_args args = new cancelABooking_args();
      args.setBooking(booking);
      sendBase("cancelABooking", args);
    }

    public void recv_cancelABooking() throws org.apache.thrift.TException
    {
      cancelABooking_result result = new cancelABooking_result();
      receiveBase(result, "cancelABooking");
      return;
    }

    public void updateBooking(Booking booking) throws org.apache.thrift.TException
    {
      send_updateBooking(booking);
      recv_updateBooking();
    }

    public void send_updateBooking(Booking booking) throws org.apache.thrift.TException
    {
      updateBooking_args args = new updateBooking_args();
      args.setBooking(booking);
      sendBase("updateBooking", args);
    }

    public void recv_updateBooking() throws org.apache.thrift.TException
    {
      updateBooking_result result = new updateBooking_result();
      receiveBase(result, "updateBooking");
      return;
    }

    public void deleteBookingRoom(Booking booking) throws org.apache.thrift.TException
    {
      send_deleteBookingRoom(booking);
      recv_deleteBookingRoom();
    }

    public void send_deleteBookingRoom(Booking booking) throws org.apache.thrift.TException
    {
      deleteBookingRoom_args args = new deleteBookingRoom_args();
      args.setBooking(booking);
      sendBase("deleteBookingRoom", args);
    }

    public void recv_deleteBookingRoom() throws org.apache.thrift.TException
    {
      deleteBookingRoom_result result = new deleteBookingRoom_result();
      receiveBase(result, "deleteBookingRoom");
      return;
    }

    public BookingRoom makeBookingRoom(RoomType roomType, Booking booking, Guest guest) throws org.apache.thrift.TException
    {
      send_makeBookingRoom(roomType, booking, guest);
      return recv_makeBookingRoom();
    }

    public void send_makeBookingRoom(RoomType roomType, Booking booking, Guest guest) throws org.apache.thrift.TException
    {
      makeBookingRoom_args args = new makeBookingRoom_args();
      args.setRoomType(roomType);
      args.setBooking(booking);
      args.setGuest(guest);
      sendBase("makeBookingRoom", args);
    }

    public BookingRoom recv_makeBookingRoom() throws org.apache.thrift.TException
    {
      makeBookingRoom_result result = new makeBookingRoom_result();
      receiveBase(result, "makeBookingRoom");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "makeBookingRoom failed: unknown result");
    }

    public Hotel createHotel(String name, Location location, HotelType hotelType) throws org.apache.thrift.TException
    {
      send_createHotel(name, location, hotelType);
      return recv_createHotel();
    }

    public void send_createHotel(String name, Location location, HotelType hotelType) throws org.apache.thrift.TException
    {
      createHotel_args args = new createHotel_args();
      args.setName(name);
      args.setLocation(location);
      args.setHotelType(hotelType);
      sendBase("createHotel", args);
    }

    public Hotel recv_createHotel() throws org.apache.thrift.TException
    {
      createHotel_result result = new createHotel_result();
      receiveBase(result, "createHotel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createHotel failed: unknown result");
    }

    public Location createLocation(String name) throws org.apache.thrift.TException
    {
      send_createLocation(name);
      return recv_createLocation();
    }

    public void send_createLocation(String name) throws org.apache.thrift.TException
    {
      createLocation_args args = new createLocation_args();
      args.setName(name);
      sendBase("createLocation", args);
    }

    public Location recv_createLocation() throws org.apache.thrift.TException
    {
      createLocation_result result = new createLocation_result();
      receiveBase(result, "createLocation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createLocation failed: unknown result");
    }

    public HotelType createHotelType(String hotelTypeName) throws org.apache.thrift.TException
    {
      send_createHotelType(hotelTypeName);
      return recv_createHotelType();
    }

    public void send_createHotelType(String hotelTypeName) throws org.apache.thrift.TException
    {
      createHotelType_args args = new createHotelType_args();
      args.setHotelTypeName(hotelTypeName);
      sendBase("createHotelType", args);
    }

    public HotelType recv_createHotelType() throws org.apache.thrift.TException
    {
      createHotelType_result result = new createHotelType_result();
      receiveBase(result, "createHotelType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createHotelType failed: unknown result");
    }

    public RoomType createRoomType(String name, Hotel hotel, double roomRatePerDay, int maxNumberOfPeople) throws org.apache.thrift.TException
    {
      send_createRoomType(name, hotel, roomRatePerDay, maxNumberOfPeople);
      return recv_createRoomType();
    }

    public void send_createRoomType(String name, Hotel hotel, double roomRatePerDay, int maxNumberOfPeople) throws org.apache.thrift.TException
    {
      createRoomType_args args = new createRoomType_args();
      args.setName(name);
      args.setHotel(hotel);
      args.setRoomRatePerDay(roomRatePerDay);
      args.setMaxNumberOfPeople(maxNumberOfPeople);
      sendBase("createRoomType", args);
    }

    public RoomType recv_createRoomType() throws org.apache.thrift.TException
    {
      createRoomType_result result = new createRoomType_result();
      receiveBase(result, "createRoomType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createRoomType failed: unknown result");
    }

    public Guest createGuest(String firstName, String surname) throws org.apache.thrift.TException
    {
      send_createGuest(firstName, surname);
      return recv_createGuest();
    }

    public void send_createGuest(String firstName, String surname) throws org.apache.thrift.TException
    {
      createGuest_args args = new createGuest_args();
      args.setFirstName(firstName);
      args.setSurname(surname);
      sendBase("createGuest", args);
    }

    public Guest recv_createGuest() throws org.apache.thrift.TException
    {
      createGuest_result result = new createGuest_result();
      receiveBase(result, "createGuest");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createGuest failed: unknown result");
    }

    public List<RoomType> findAvailableRoomsInLocation() throws org.apache.thrift.TException
    {
      send_findAvailableRoomsInLocation();
      return recv_findAvailableRoomsInLocation();
    }

    public void send_findAvailableRoomsInLocation() throws org.apache.thrift.TException
    {
      findAvailableRoomsInLocation_args args = new findAvailableRoomsInLocation_args();
      sendBase("findAvailableRoomsInLocation", args);
    }

    public List<RoomType> recv_findAvailableRoomsInLocation() throws org.apache.thrift.TException
    {
      findAvailableRoomsInLocation_result result = new findAvailableRoomsInLocation_result();
      receiveBase(result, "findAvailableRoomsInLocation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAvailableRoomsInLocation failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void makeABooking(Hotel hotel, String arrivalDate, String departureDate, Guest guest, RoomType roomType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      makeABooking_call method_call = new makeABooking_call(hotel, arrivalDate, departureDate, guest, roomType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class makeABooking_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Hotel hotel;
      private String arrivalDate;
      private String departureDate;
      private Guest guest;
      private RoomType roomType;
      public makeABooking_call(Hotel hotel, String arrivalDate, String departureDate, Guest guest, RoomType roomType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hotel = hotel;
        this.arrivalDate = arrivalDate;
        this.departureDate = departureDate;
        this.guest = guest;
        this.roomType = roomType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("makeABooking", org.apache.thrift.protocol.TMessageType.CALL, 0));
        makeABooking_args args = new makeABooking_args();
        args.setHotel(hotel);
        args.setArrivalDate(arrivalDate);
        args.setDepartureDate(departureDate);
        args.setGuest(guest);
        args.setRoomType(roomType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Booking getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_makeABooking();
      }
    }

    public void cancelABooking(Booking booking, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cancelABooking_call method_call = new cancelABooking_call(booking, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancelABooking_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Booking booking;
      public cancelABooking_call(Booking booking, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.booking = booking;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancelABooking", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cancelABooking_args args = new cancelABooking_args();
        args.setBooking(booking);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_cancelABooking();
      }
    }

    public void updateBooking(Booking booking, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateBooking_call method_call = new updateBooking_call(booking, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateBooking_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Booking booking;
      public updateBooking_call(Booking booking, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.booking = booking;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateBooking", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateBooking_args args = new updateBooking_args();
        args.setBooking(booking);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateBooking();
      }
    }

    public void deleteBookingRoom(Booking booking, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteBookingRoom_call method_call = new deleteBookingRoom_call(booking, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteBookingRoom_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Booking booking;
      public deleteBookingRoom_call(Booking booking, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.booking = booking;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteBookingRoom", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteBookingRoom_args args = new deleteBookingRoom_args();
        args.setBooking(booking);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteBookingRoom();
      }
    }

    public void makeBookingRoom(RoomType roomType, Booking booking, Guest guest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      makeBookingRoom_call method_call = new makeBookingRoom_call(roomType, booking, guest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class makeBookingRoom_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RoomType roomType;
      private Booking booking;
      private Guest guest;
      public makeBookingRoom_call(RoomType roomType, Booking booking, Guest guest, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roomType = roomType;
        this.booking = booking;
        this.guest = guest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("makeBookingRoom", org.apache.thrift.protocol.TMessageType.CALL, 0));
        makeBookingRoom_args args = new makeBookingRoom_args();
        args.setRoomType(roomType);
        args.setBooking(booking);
        args.setGuest(guest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BookingRoom getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_makeBookingRoom();
      }
    }

    public void createHotel(String name, Location location, HotelType hotelType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createHotel_call method_call = new createHotel_call(name, location, hotelType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createHotel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      private Location location;
      private HotelType hotelType;
      public createHotel_call(String name, Location location, HotelType hotelType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
        this.location = location;
        this.hotelType = hotelType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createHotel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createHotel_args args = new createHotel_args();
        args.setName(name);
        args.setLocation(location);
        args.setHotelType(hotelType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Hotel getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createHotel();
      }
    }

    public void createLocation(String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createLocation_call method_call = new createLocation_call(name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createLocation_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      public createLocation_call(String name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createLocation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createLocation_args args = new createLocation_args();
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Location getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createLocation();
      }
    }

    public void createHotelType(String hotelTypeName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createHotelType_call method_call = new createHotelType_call(hotelTypeName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createHotelType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String hotelTypeName;
      public createHotelType_call(String hotelTypeName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hotelTypeName = hotelTypeName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createHotelType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createHotelType_args args = new createHotelType_args();
        args.setHotelTypeName(hotelTypeName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public HotelType getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createHotelType();
      }
    }

    public void createRoomType(String name, Hotel hotel, double roomRatePerDay, int maxNumberOfPeople, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createRoomType_call method_call = new createRoomType_call(name, hotel, roomRatePerDay, maxNumberOfPeople, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createRoomType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      private Hotel hotel;
      private double roomRatePerDay;
      private int maxNumberOfPeople;
      public createRoomType_call(String name, Hotel hotel, double roomRatePerDay, int maxNumberOfPeople, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
        this.hotel = hotel;
        this.roomRatePerDay = roomRatePerDay;
        this.maxNumberOfPeople = maxNumberOfPeople;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createRoomType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createRoomType_args args = new createRoomType_args();
        args.setName(name);
        args.setHotel(hotel);
        args.setRoomRatePerDay(roomRatePerDay);
        args.setMaxNumberOfPeople(maxNumberOfPeople);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RoomType getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createRoomType();
      }
    }

    public void createGuest(String firstName, String surname, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createGuest_call method_call = new createGuest_call(firstName, surname, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createGuest_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String firstName;
      private String surname;
      public createGuest_call(String firstName, String surname, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.firstName = firstName;
        this.surname = surname;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createGuest", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createGuest_args args = new createGuest_args();
        args.setFirstName(firstName);
        args.setSurname(surname);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Guest getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createGuest();
      }
    }

    public void findAvailableRoomsInLocation(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAvailableRoomsInLocation_call method_call = new findAvailableRoomsInLocation_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAvailableRoomsInLocation_call extends org.apache.thrift.async.TAsyncMethodCall {
      public findAvailableRoomsInLocation_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAvailableRoomsInLocation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAvailableRoomsInLocation_args args = new findAvailableRoomsInLocation_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<RoomType> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAvailableRoomsInLocation();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("makeABooking", new makeABooking());
      processMap.put("cancelABooking", new cancelABooking());
      processMap.put("updateBooking", new updateBooking());
      processMap.put("deleteBookingRoom", new deleteBookingRoom());
      processMap.put("makeBookingRoom", new makeBookingRoom());
      processMap.put("createHotel", new createHotel());
      processMap.put("createLocation", new createLocation());
      processMap.put("createHotelType", new createHotelType());
      processMap.put("createRoomType", new createRoomType());
      processMap.put("createGuest", new createGuest());
      processMap.put("findAvailableRoomsInLocation", new findAvailableRoomsInLocation());
      return processMap;
    }

    public static class makeABooking<I extends Iface> extends org.apache.thrift.ProcessFunction<I, makeABooking_args> {
      public makeABooking() {
        super("makeABooking");
      }

      public makeABooking_args getEmptyArgsInstance() {
        return new makeABooking_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public makeABooking_result getResult(I iface, makeABooking_args args) throws org.apache.thrift.TException {
        makeABooking_result result = new makeABooking_result();
        result.success = iface.makeABooking(args.hotel, args.arrivalDate, args.departureDate, args.guest, args.roomType);
        return result;
      }
    }

    public static class cancelABooking<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancelABooking_args> {
      public cancelABooking() {
        super("cancelABooking");
      }

      public cancelABooking_args getEmptyArgsInstance() {
        return new cancelABooking_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cancelABooking_result getResult(I iface, cancelABooking_args args) throws org.apache.thrift.TException {
        cancelABooking_result result = new cancelABooking_result();
        iface.cancelABooking(args.booking);
        return result;
      }
    }

    public static class updateBooking<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateBooking_args> {
      public updateBooking() {
        super("updateBooking");
      }

      public updateBooking_args getEmptyArgsInstance() {
        return new updateBooking_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateBooking_result getResult(I iface, updateBooking_args args) throws org.apache.thrift.TException {
        updateBooking_result result = new updateBooking_result();
        iface.updateBooking(args.booking);
        return result;
      }
    }

    public static class deleteBookingRoom<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteBookingRoom_args> {
      public deleteBookingRoom() {
        super("deleteBookingRoom");
      }

      public deleteBookingRoom_args getEmptyArgsInstance() {
        return new deleteBookingRoom_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteBookingRoom_result getResult(I iface, deleteBookingRoom_args args) throws org.apache.thrift.TException {
        deleteBookingRoom_result result = new deleteBookingRoom_result();
        iface.deleteBookingRoom(args.booking);
        return result;
      }
    }

    public static class makeBookingRoom<I extends Iface> extends org.apache.thrift.ProcessFunction<I, makeBookingRoom_args> {
      public makeBookingRoom() {
        super("makeBookingRoom");
      }

      public makeBookingRoom_args getEmptyArgsInstance() {
        return new makeBookingRoom_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public makeBookingRoom_result getResult(I iface, makeBookingRoom_args args) throws org.apache.thrift.TException {
        makeBookingRoom_result result = new makeBookingRoom_result();
        result.success = iface.makeBookingRoom(args.roomType, args.booking, args.guest);
        return result;
      }
    }

    public static class createHotel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createHotel_args> {
      public createHotel() {
        super("createHotel");
      }

      public createHotel_args getEmptyArgsInstance() {
        return new createHotel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createHotel_result getResult(I iface, createHotel_args args) throws org.apache.thrift.TException {
        createHotel_result result = new createHotel_result();
        result.success = iface.createHotel(args.name, args.location, args.hotelType);
        return result;
      }
    }

    public static class createLocation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createLocation_args> {
      public createLocation() {
        super("createLocation");
      }

      public createLocation_args getEmptyArgsInstance() {
        return new createLocation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createLocation_result getResult(I iface, createLocation_args args) throws org.apache.thrift.TException {
        createLocation_result result = new createLocation_result();
        result.success = iface.createLocation(args.name);
        return result;
      }
    }

    public static class createHotelType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createHotelType_args> {
      public createHotelType() {
        super("createHotelType");
      }

      public createHotelType_args getEmptyArgsInstance() {
        return new createHotelType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createHotelType_result getResult(I iface, createHotelType_args args) throws org.apache.thrift.TException {
        createHotelType_result result = new createHotelType_result();
        result.success = iface.createHotelType(args.hotelTypeName);
        return result;
      }
    }

    public static class createRoomType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createRoomType_args> {
      public createRoomType() {
        super("createRoomType");
      }

      public createRoomType_args getEmptyArgsInstance() {
        return new createRoomType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createRoomType_result getResult(I iface, createRoomType_args args) throws org.apache.thrift.TException {
        createRoomType_result result = new createRoomType_result();
        result.success = iface.createRoomType(args.name, args.hotel, args.roomRatePerDay, args.maxNumberOfPeople);
        return result;
      }
    }

    public static class createGuest<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createGuest_args> {
      public createGuest() {
        super("createGuest");
      }

      public createGuest_args getEmptyArgsInstance() {
        return new createGuest_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createGuest_result getResult(I iface, createGuest_args args) throws org.apache.thrift.TException {
        createGuest_result result = new createGuest_result();
        result.success = iface.createGuest(args.firstName, args.surname);
        return result;
      }
    }

    public static class findAvailableRoomsInLocation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAvailableRoomsInLocation_args> {
      public findAvailableRoomsInLocation() {
        super("findAvailableRoomsInLocation");
      }

      public findAvailableRoomsInLocation_args getEmptyArgsInstance() {
        return new findAvailableRoomsInLocation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findAvailableRoomsInLocation_result getResult(I iface, findAvailableRoomsInLocation_args args) throws org.apache.thrift.TException {
        findAvailableRoomsInLocation_result result = new findAvailableRoomsInLocation_result();
        result.success = iface.findAvailableRoomsInLocation();
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("makeABooking", new makeABooking());
      processMap.put("cancelABooking", new cancelABooking());
      processMap.put("updateBooking", new updateBooking());
      processMap.put("deleteBookingRoom", new deleteBookingRoom());
      processMap.put("makeBookingRoom", new makeBookingRoom());
      processMap.put("createHotel", new createHotel());
      processMap.put("createLocation", new createLocation());
      processMap.put("createHotelType", new createHotelType());
      processMap.put("createRoomType", new createRoomType());
      processMap.put("createGuest", new createGuest());
      processMap.put("findAvailableRoomsInLocation", new findAvailableRoomsInLocation());
      return processMap;
    }

    public static class makeABooking<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, makeABooking_args, Booking> {
      public makeABooking() {
        super("makeABooking");
      }

      public makeABooking_args getEmptyArgsInstance() {
        return new makeABooking_args();
      }

      public AsyncMethodCallback<Booking> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Booking>() { 
          public void onComplete(Booking o) {
            makeABooking_result result = new makeABooking_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            makeABooking_result result = new makeABooking_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, makeABooking_args args, org.apache.thrift.async.AsyncMethodCallback<Booking> resultHandler) throws TException {
        iface.makeABooking(args.hotel, args.arrivalDate, args.departureDate, args.guest, args.roomType,resultHandler);
      }
    }

    public static class cancelABooking<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cancelABooking_args, Void> {
      public cancelABooking() {
        super("cancelABooking");
      }

      public cancelABooking_args getEmptyArgsInstance() {
        return new cancelABooking_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            cancelABooking_result result = new cancelABooking_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cancelABooking_result result = new cancelABooking_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cancelABooking_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.cancelABooking(args.booking,resultHandler);
      }
    }

    public static class updateBooking<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateBooking_args, Void> {
      public updateBooking() {
        super("updateBooking");
      }

      public updateBooking_args getEmptyArgsInstance() {
        return new updateBooking_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateBooking_result result = new updateBooking_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateBooking_result result = new updateBooking_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateBooking_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updateBooking(args.booking,resultHandler);
      }
    }

    public static class deleteBookingRoom<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteBookingRoom_args, Void> {
      public deleteBookingRoom() {
        super("deleteBookingRoom");
      }

      public deleteBookingRoom_args getEmptyArgsInstance() {
        return new deleteBookingRoom_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteBookingRoom_result result = new deleteBookingRoom_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteBookingRoom_result result = new deleteBookingRoom_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteBookingRoom_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.deleteBookingRoom(args.booking,resultHandler);
      }
    }

    public static class makeBookingRoom<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, makeBookingRoom_args, BookingRoom> {
      public makeBookingRoom() {
        super("makeBookingRoom");
      }

      public makeBookingRoom_args getEmptyArgsInstance() {
        return new makeBookingRoom_args();
      }

      public AsyncMethodCallback<BookingRoom> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<BookingRoom>() { 
          public void onComplete(BookingRoom o) {
            makeBookingRoom_result result = new makeBookingRoom_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            makeBookingRoom_result result = new makeBookingRoom_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, makeBookingRoom_args args, org.apache.thrift.async.AsyncMethodCallback<BookingRoom> resultHandler) throws TException {
        iface.makeBookingRoom(args.roomType, args.booking, args.guest,resultHandler);
      }
    }

    public static class createHotel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createHotel_args, Hotel> {
      public createHotel() {
        super("createHotel");
      }

      public createHotel_args getEmptyArgsInstance() {
        return new createHotel_args();
      }

      public AsyncMethodCallback<Hotel> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Hotel>() { 
          public void onComplete(Hotel o) {
            createHotel_result result = new createHotel_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createHotel_result result = new createHotel_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createHotel_args args, org.apache.thrift.async.AsyncMethodCallback<Hotel> resultHandler) throws TException {
        iface.createHotel(args.name, args.location, args.hotelType,resultHandler);
      }
    }

    public static class createLocation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createLocation_args, Location> {
      public createLocation() {
        super("createLocation");
      }

      public createLocation_args getEmptyArgsInstance() {
        return new createLocation_args();
      }

      public AsyncMethodCallback<Location> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Location>() { 
          public void onComplete(Location o) {
            createLocation_result result = new createLocation_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createLocation_result result = new createLocation_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createLocation_args args, org.apache.thrift.async.AsyncMethodCallback<Location> resultHandler) throws TException {
        iface.createLocation(args.name,resultHandler);
      }
    }

    public static class createHotelType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createHotelType_args, HotelType> {
      public createHotelType() {
        super("createHotelType");
      }

      public createHotelType_args getEmptyArgsInstance() {
        return new createHotelType_args();
      }

      public AsyncMethodCallback<HotelType> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<HotelType>() { 
          public void onComplete(HotelType o) {
            createHotelType_result result = new createHotelType_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createHotelType_result result = new createHotelType_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createHotelType_args args, org.apache.thrift.async.AsyncMethodCallback<HotelType> resultHandler) throws TException {
        iface.createHotelType(args.hotelTypeName,resultHandler);
      }
    }

    public static class createRoomType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createRoomType_args, RoomType> {
      public createRoomType() {
        super("createRoomType");
      }

      public createRoomType_args getEmptyArgsInstance() {
        return new createRoomType_args();
      }

      public AsyncMethodCallback<RoomType> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RoomType>() { 
          public void onComplete(RoomType o) {
            createRoomType_result result = new createRoomType_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createRoomType_result result = new createRoomType_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createRoomType_args args, org.apache.thrift.async.AsyncMethodCallback<RoomType> resultHandler) throws TException {
        iface.createRoomType(args.name, args.hotel, args.roomRatePerDay, args.maxNumberOfPeople,resultHandler);
      }
    }

    public static class createGuest<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createGuest_args, Guest> {
      public createGuest() {
        super("createGuest");
      }

      public createGuest_args getEmptyArgsInstance() {
        return new createGuest_args();
      }

      public AsyncMethodCallback<Guest> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Guest>() { 
          public void onComplete(Guest o) {
            createGuest_result result = new createGuest_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createGuest_result result = new createGuest_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createGuest_args args, org.apache.thrift.async.AsyncMethodCallback<Guest> resultHandler) throws TException {
        iface.createGuest(args.firstName, args.surname,resultHandler);
      }
    }

    public static class findAvailableRoomsInLocation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAvailableRoomsInLocation_args, List<RoomType>> {
      public findAvailableRoomsInLocation() {
        super("findAvailableRoomsInLocation");
      }

      public findAvailableRoomsInLocation_args getEmptyArgsInstance() {
        return new findAvailableRoomsInLocation_args();
      }

      public AsyncMethodCallback<List<RoomType>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<RoomType>>() { 
          public void onComplete(List<RoomType> o) {
            findAvailableRoomsInLocation_result result = new findAvailableRoomsInLocation_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findAvailableRoomsInLocation_result result = new findAvailableRoomsInLocation_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAvailableRoomsInLocation_args args, org.apache.thrift.async.AsyncMethodCallback<List<RoomType>> resultHandler) throws TException {
        iface.findAvailableRoomsInLocation(resultHandler);
      }
    }

  }

  public static class makeABooking_args implements org.apache.thrift.TBase<makeABooking_args, makeABooking_args._Fields>, java.io.Serializable, Cloneable, Comparable<makeABooking_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("makeABooking_args");

    private static final org.apache.thrift.protocol.TField HOTEL_FIELD_DESC = new org.apache.thrift.protocol.TField("hotel", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ARRIVAL_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("arrivalDate", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DEPARTURE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("departureDate", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField GUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("guest", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ROOM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("roomType", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new makeABooking_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new makeABooking_argsTupleSchemeFactory());
    }

    public Hotel hotel; // required
    public String arrivalDate; // required
    public String departureDate; // required
    public Guest guest; // required
    public RoomType roomType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOTEL((short)1, "hotel"),
      ARRIVAL_DATE((short)2, "arrivalDate"),
      DEPARTURE_DATE((short)3, "departureDate"),
      GUEST((short)4, "guest"),
      ROOM_TYPE((short)5, "roomType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOTEL
            return HOTEL;
          case 2: // ARRIVAL_DATE
            return ARRIVAL_DATE;
          case 3: // DEPARTURE_DATE
            return DEPARTURE_DATE;
          case 4: // GUEST
            return GUEST;
          case 5: // ROOM_TYPE
            return ROOM_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOTEL, new org.apache.thrift.meta_data.FieldMetaData("hotel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Hotel.class)));
      tmpMap.put(_Fields.ARRIVAL_DATE, new org.apache.thrift.meta_data.FieldMetaData("arrivalDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DEPARTURE_DATE, new org.apache.thrift.meta_data.FieldMetaData("departureDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GUEST, new org.apache.thrift.meta_data.FieldMetaData("guest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Guest.class)));
      tmpMap.put(_Fields.ROOM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("roomType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RoomType.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(makeABooking_args.class, metaDataMap);
    }

    public makeABooking_args() {
    }

    public makeABooking_args(
      Hotel hotel,
      String arrivalDate,
      String departureDate,
      Guest guest,
      RoomType roomType)
    {
      this();
      this.hotel = hotel;
      this.arrivalDate = arrivalDate;
      this.departureDate = departureDate;
      this.guest = guest;
      this.roomType = roomType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public makeABooking_args(makeABooking_args other) {
      if (other.isSetHotel()) {
        this.hotel = new Hotel(other.hotel);
      }
      if (other.isSetArrivalDate()) {
        this.arrivalDate = other.arrivalDate;
      }
      if (other.isSetDepartureDate()) {
        this.departureDate = other.departureDate;
      }
      if (other.isSetGuest()) {
        this.guest = new Guest(other.guest);
      }
      if (other.isSetRoomType()) {
        this.roomType = new RoomType(other.roomType);
      }
    }

    public makeABooking_args deepCopy() {
      return new makeABooking_args(this);
    }

    @Override
    public void clear() {
      this.hotel = null;
      this.arrivalDate = null;
      this.departureDate = null;
      this.guest = null;
      this.roomType = null;
    }

    public Hotel getHotel() {
      return this.hotel;
    }

    public makeABooking_args setHotel(Hotel hotel) {
      this.hotel = hotel;
      return this;
    }

    public void unsetHotel() {
      this.hotel = null;
    }

    /** Returns true if field hotel is set (has been assigned a value) and false otherwise */
    public boolean isSetHotel() {
      return this.hotel != null;
    }

    public void setHotelIsSet(boolean value) {
      if (!value) {
        this.hotel = null;
      }
    }

    public String getArrivalDate() {
      return this.arrivalDate;
    }

    public makeABooking_args setArrivalDate(String arrivalDate) {
      this.arrivalDate = arrivalDate;
      return this;
    }

    public void unsetArrivalDate() {
      this.arrivalDate = null;
    }

    /** Returns true if field arrivalDate is set (has been assigned a value) and false otherwise */
    public boolean isSetArrivalDate() {
      return this.arrivalDate != null;
    }

    public void setArrivalDateIsSet(boolean value) {
      if (!value) {
        this.arrivalDate = null;
      }
    }

    public String getDepartureDate() {
      return this.departureDate;
    }

    public makeABooking_args setDepartureDate(String departureDate) {
      this.departureDate = departureDate;
      return this;
    }

    public void unsetDepartureDate() {
      this.departureDate = null;
    }

    /** Returns true if field departureDate is set (has been assigned a value) and false otherwise */
    public boolean isSetDepartureDate() {
      return this.departureDate != null;
    }

    public void setDepartureDateIsSet(boolean value) {
      if (!value) {
        this.departureDate = null;
      }
    }

    public Guest getGuest() {
      return this.guest;
    }

    public makeABooking_args setGuest(Guest guest) {
      this.guest = guest;
      return this;
    }

    public void unsetGuest() {
      this.guest = null;
    }

    /** Returns true if field guest is set (has been assigned a value) and false otherwise */
    public boolean isSetGuest() {
      return this.guest != null;
    }

    public void setGuestIsSet(boolean value) {
      if (!value) {
        this.guest = null;
      }
    }

    public RoomType getRoomType() {
      return this.roomType;
    }

    public makeABooking_args setRoomType(RoomType roomType) {
      this.roomType = roomType;
      return this;
    }

    public void unsetRoomType() {
      this.roomType = null;
    }

    /** Returns true if field roomType is set (has been assigned a value) and false otherwise */
    public boolean isSetRoomType() {
      return this.roomType != null;
    }

    public void setRoomTypeIsSet(boolean value) {
      if (!value) {
        this.roomType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HOTEL:
        if (value == null) {
          unsetHotel();
        } else {
          setHotel((Hotel)value);
        }
        break;

      case ARRIVAL_DATE:
        if (value == null) {
          unsetArrivalDate();
        } else {
          setArrivalDate((String)value);
        }
        break;

      case DEPARTURE_DATE:
        if (value == null) {
          unsetDepartureDate();
        } else {
          setDepartureDate((String)value);
        }
        break;

      case GUEST:
        if (value == null) {
          unsetGuest();
        } else {
          setGuest((Guest)value);
        }
        break;

      case ROOM_TYPE:
        if (value == null) {
          unsetRoomType();
        } else {
          setRoomType((RoomType)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HOTEL:
        return getHotel();

      case ARRIVAL_DATE:
        return getArrivalDate();

      case DEPARTURE_DATE:
        return getDepartureDate();

      case GUEST:
        return getGuest();

      case ROOM_TYPE:
        return getRoomType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HOTEL:
        return isSetHotel();
      case ARRIVAL_DATE:
        return isSetArrivalDate();
      case DEPARTURE_DATE:
        return isSetDepartureDate();
      case GUEST:
        return isSetGuest();
      case ROOM_TYPE:
        return isSetRoomType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof makeABooking_args)
        return this.equals((makeABooking_args)that);
      return false;
    }

    public boolean equals(makeABooking_args that) {
      if (that == null)
        return false;

      boolean this_present_hotel = true && this.isSetHotel();
      boolean that_present_hotel = true && that.isSetHotel();
      if (this_present_hotel || that_present_hotel) {
        if (!(this_present_hotel && that_present_hotel))
          return false;
        if (!this.hotel.equals(that.hotel))
          return false;
      }

      boolean this_present_arrivalDate = true && this.isSetArrivalDate();
      boolean that_present_arrivalDate = true && that.isSetArrivalDate();
      if (this_present_arrivalDate || that_present_arrivalDate) {
        if (!(this_present_arrivalDate && that_present_arrivalDate))
          return false;
        if (!this.arrivalDate.equals(that.arrivalDate))
          return false;
      }

      boolean this_present_departureDate = true && this.isSetDepartureDate();
      boolean that_present_departureDate = true && that.isSetDepartureDate();
      if (this_present_departureDate || that_present_departureDate) {
        if (!(this_present_departureDate && that_present_departureDate))
          return false;
        if (!this.departureDate.equals(that.departureDate))
          return false;
      }

      boolean this_present_guest = true && this.isSetGuest();
      boolean that_present_guest = true && that.isSetGuest();
      if (this_present_guest || that_present_guest) {
        if (!(this_present_guest && that_present_guest))
          return false;
        if (!this.guest.equals(that.guest))
          return false;
      }

      boolean this_present_roomType = true && this.isSetRoomType();
      boolean that_present_roomType = true && that.isSetRoomType();
      if (this_present_roomType || that_present_roomType) {
        if (!(this_present_roomType && that_present_roomType))
          return false;
        if (!this.roomType.equals(that.roomType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_hotel = true && (isSetHotel());
      list.add(present_hotel);
      if (present_hotel)
        list.add(hotel);

      boolean present_arrivalDate = true && (isSetArrivalDate());
      list.add(present_arrivalDate);
      if (present_arrivalDate)
        list.add(arrivalDate);

      boolean present_departureDate = true && (isSetDepartureDate());
      list.add(present_departureDate);
      if (present_departureDate)
        list.add(departureDate);

      boolean present_guest = true && (isSetGuest());
      list.add(present_guest);
      if (present_guest)
        list.add(guest);

      boolean present_roomType = true && (isSetRoomType());
      list.add(present_roomType);
      if (present_roomType)
        list.add(roomType);

      return list.hashCode();
    }

    @Override
    public int compareTo(makeABooking_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHotel()).compareTo(other.isSetHotel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHotel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hotel, other.hotel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArrivalDate()).compareTo(other.isSetArrivalDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArrivalDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arrivalDate, other.arrivalDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDepartureDate()).compareTo(other.isSetDepartureDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDepartureDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departureDate, other.departureDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGuest()).compareTo(other.isSetGuest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guest, other.guest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRoomType()).compareTo(other.isSetRoomType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoomType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomType, other.roomType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("makeABooking_args(");
      boolean first = true;

      sb.append("hotel:");
      if (this.hotel == null) {
        sb.append("null");
      } else {
        sb.append(this.hotel);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arrivalDate:");
      if (this.arrivalDate == null) {
        sb.append("null");
      } else {
        sb.append(this.arrivalDate);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("departureDate:");
      if (this.departureDate == null) {
        sb.append("null");
      } else {
        sb.append(this.departureDate);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guest:");
      if (this.guest == null) {
        sb.append("null");
      } else {
        sb.append(this.guest);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("roomType:");
      if (this.roomType == null) {
        sb.append("null");
      } else {
        sb.append(this.roomType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (hotel != null) {
        hotel.validate();
      }
      if (guest != null) {
        guest.validate();
      }
      if (roomType != null) {
        roomType.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class makeABooking_argsStandardSchemeFactory implements SchemeFactory {
      public makeABooking_argsStandardScheme getScheme() {
        return new makeABooking_argsStandardScheme();
      }
    }

    private static class makeABooking_argsStandardScheme extends StandardScheme<makeABooking_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, makeABooking_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOTEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.hotel = new Hotel();
                struct.hotel.read(iprot);
                struct.setHotelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARRIVAL_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.arrivalDate = iprot.readString();
                struct.setArrivalDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DEPARTURE_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.departureDate = iprot.readString();
                struct.setDepartureDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // GUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.guest = new Guest();
                struct.guest.read(iprot);
                struct.setGuestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ROOM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.roomType = new RoomType();
                struct.roomType.read(iprot);
                struct.setRoomTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, makeABooking_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hotel != null) {
          oprot.writeFieldBegin(HOTEL_FIELD_DESC);
          struct.hotel.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.arrivalDate != null) {
          oprot.writeFieldBegin(ARRIVAL_DATE_FIELD_DESC);
          oprot.writeString(struct.arrivalDate);
          oprot.writeFieldEnd();
        }
        if (struct.departureDate != null) {
          oprot.writeFieldBegin(DEPARTURE_DATE_FIELD_DESC);
          oprot.writeString(struct.departureDate);
          oprot.writeFieldEnd();
        }
        if (struct.guest != null) {
          oprot.writeFieldBegin(GUEST_FIELD_DESC);
          struct.guest.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.roomType != null) {
          oprot.writeFieldBegin(ROOM_TYPE_FIELD_DESC);
          struct.roomType.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class makeABooking_argsTupleSchemeFactory implements SchemeFactory {
      public makeABooking_argsTupleScheme getScheme() {
        return new makeABooking_argsTupleScheme();
      }
    }

    private static class makeABooking_argsTupleScheme extends TupleScheme<makeABooking_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, makeABooking_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHotel()) {
          optionals.set(0);
        }
        if (struct.isSetArrivalDate()) {
          optionals.set(1);
        }
        if (struct.isSetDepartureDate()) {
          optionals.set(2);
        }
        if (struct.isSetGuest()) {
          optionals.set(3);
        }
        if (struct.isSetRoomType()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetHotel()) {
          struct.hotel.write(oprot);
        }
        if (struct.isSetArrivalDate()) {
          oprot.writeString(struct.arrivalDate);
        }
        if (struct.isSetDepartureDate()) {
          oprot.writeString(struct.departureDate);
        }
        if (struct.isSetGuest()) {
          struct.guest.write(oprot);
        }
        if (struct.isSetRoomType()) {
          struct.roomType.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, makeABooking_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.hotel = new Hotel();
          struct.hotel.read(iprot);
          struct.setHotelIsSet(true);
        }
        if (incoming.get(1)) {
          struct.arrivalDate = iprot.readString();
          struct.setArrivalDateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.departureDate = iprot.readString();
          struct.setDepartureDateIsSet(true);
        }
        if (incoming.get(3)) {
          struct.guest = new Guest();
          struct.guest.read(iprot);
          struct.setGuestIsSet(true);
        }
        if (incoming.get(4)) {
          struct.roomType = new RoomType();
          struct.roomType.read(iprot);
          struct.setRoomTypeIsSet(true);
        }
      }
    }

  }

  public static class makeABooking_result implements org.apache.thrift.TBase<makeABooking_result, makeABooking_result._Fields>, java.io.Serializable, Cloneable, Comparable<makeABooking_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("makeABooking_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new makeABooking_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new makeABooking_resultTupleSchemeFactory());
    }

    public Booking success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Booking.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(makeABooking_result.class, metaDataMap);
    }

    public makeABooking_result() {
    }

    public makeABooking_result(
      Booking success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public makeABooking_result(makeABooking_result other) {
      if (other.isSetSuccess()) {
        this.success = new Booking(other.success);
      }
    }

    public makeABooking_result deepCopy() {
      return new makeABooking_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Booking getSuccess() {
      return this.success;
    }

    public makeABooking_result setSuccess(Booking success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Booking)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof makeABooking_result)
        return this.equals((makeABooking_result)that);
      return false;
    }

    public boolean equals(makeABooking_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(makeABooking_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("makeABooking_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class makeABooking_resultStandardSchemeFactory implements SchemeFactory {
      public makeABooking_resultStandardScheme getScheme() {
        return new makeABooking_resultStandardScheme();
      }
    }

    private static class makeABooking_resultStandardScheme extends StandardScheme<makeABooking_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, makeABooking_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Booking();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, makeABooking_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class makeABooking_resultTupleSchemeFactory implements SchemeFactory {
      public makeABooking_resultTupleScheme getScheme() {
        return new makeABooking_resultTupleScheme();
      }
    }

    private static class makeABooking_resultTupleScheme extends TupleScheme<makeABooking_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, makeABooking_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, makeABooking_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Booking();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class cancelABooking_args implements org.apache.thrift.TBase<cancelABooking_args, cancelABooking_args._Fields>, java.io.Serializable, Cloneable, Comparable<cancelABooking_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelABooking_args");

    private static final org.apache.thrift.protocol.TField BOOKING_FIELD_DESC = new org.apache.thrift.protocol.TField("booking", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelABooking_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelABooking_argsTupleSchemeFactory());
    }

    public Booking booking; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOOKING((short)1, "booking");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOOKING
            return BOOKING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOOKING, new org.apache.thrift.meta_data.FieldMetaData("booking", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Booking.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelABooking_args.class, metaDataMap);
    }

    public cancelABooking_args() {
    }

    public cancelABooking_args(
      Booking booking)
    {
      this();
      this.booking = booking;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelABooking_args(cancelABooking_args other) {
      if (other.isSetBooking()) {
        this.booking = new Booking(other.booking);
      }
    }

    public cancelABooking_args deepCopy() {
      return new cancelABooking_args(this);
    }

    @Override
    public void clear() {
      this.booking = null;
    }

    public Booking getBooking() {
      return this.booking;
    }

    public cancelABooking_args setBooking(Booking booking) {
      this.booking = booking;
      return this;
    }

    public void unsetBooking() {
      this.booking = null;
    }

    /** Returns true if field booking is set (has been assigned a value) and false otherwise */
    public boolean isSetBooking() {
      return this.booking != null;
    }

    public void setBookingIsSet(boolean value) {
      if (!value) {
        this.booking = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BOOKING:
        if (value == null) {
          unsetBooking();
        } else {
          setBooking((Booking)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BOOKING:
        return getBooking();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BOOKING:
        return isSetBooking();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelABooking_args)
        return this.equals((cancelABooking_args)that);
      return false;
    }

    public boolean equals(cancelABooking_args that) {
      if (that == null)
        return false;

      boolean this_present_booking = true && this.isSetBooking();
      boolean that_present_booking = true && that.isSetBooking();
      if (this_present_booking || that_present_booking) {
        if (!(this_present_booking && that_present_booking))
          return false;
        if (!this.booking.equals(that.booking))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_booking = true && (isSetBooking());
      list.add(present_booking);
      if (present_booking)
        list.add(booking);

      return list.hashCode();
    }

    @Override
    public int compareTo(cancelABooking_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBooking()).compareTo(other.isSetBooking());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBooking()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.booking, other.booking);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelABooking_args(");
      boolean first = true;

      sb.append("booking:");
      if (this.booking == null) {
        sb.append("null");
      } else {
        sb.append(this.booking);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (booking != null) {
        booking.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelABooking_argsStandardSchemeFactory implements SchemeFactory {
      public cancelABooking_argsStandardScheme getScheme() {
        return new cancelABooking_argsStandardScheme();
      }
    }

    private static class cancelABooking_argsStandardScheme extends StandardScheme<cancelABooking_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelABooking_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOOKING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.booking = new Booking();
                struct.booking.read(iprot);
                struct.setBookingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelABooking_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.booking != null) {
          oprot.writeFieldBegin(BOOKING_FIELD_DESC);
          struct.booking.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelABooking_argsTupleSchemeFactory implements SchemeFactory {
      public cancelABooking_argsTupleScheme getScheme() {
        return new cancelABooking_argsTupleScheme();
      }
    }

    private static class cancelABooking_argsTupleScheme extends TupleScheme<cancelABooking_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelABooking_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBooking()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBooking()) {
          struct.booking.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelABooking_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.booking = new Booking();
          struct.booking.read(iprot);
          struct.setBookingIsSet(true);
        }
      }
    }

  }

  public static class cancelABooking_result implements org.apache.thrift.TBase<cancelABooking_result, cancelABooking_result._Fields>, java.io.Serializable, Cloneable, Comparable<cancelABooking_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelABooking_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelABooking_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelABooking_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelABooking_result.class, metaDataMap);
    }

    public cancelABooking_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelABooking_result(cancelABooking_result other) {
    }

    public cancelABooking_result deepCopy() {
      return new cancelABooking_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelABooking_result)
        return this.equals((cancelABooking_result)that);
      return false;
    }

    public boolean equals(cancelABooking_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(cancelABooking_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelABooking_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelABooking_resultStandardSchemeFactory implements SchemeFactory {
      public cancelABooking_resultStandardScheme getScheme() {
        return new cancelABooking_resultStandardScheme();
      }
    }

    private static class cancelABooking_resultStandardScheme extends StandardScheme<cancelABooking_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelABooking_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelABooking_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelABooking_resultTupleSchemeFactory implements SchemeFactory {
      public cancelABooking_resultTupleScheme getScheme() {
        return new cancelABooking_resultTupleScheme();
      }
    }

    private static class cancelABooking_resultTupleScheme extends TupleScheme<cancelABooking_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelABooking_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelABooking_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updateBooking_args implements org.apache.thrift.TBase<updateBooking_args, updateBooking_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateBooking_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBooking_args");

    private static final org.apache.thrift.protocol.TField BOOKING_FIELD_DESC = new org.apache.thrift.protocol.TField("booking", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateBooking_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateBooking_argsTupleSchemeFactory());
    }

    public Booking booking; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOOKING((short)1, "booking");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOOKING
            return BOOKING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOOKING, new org.apache.thrift.meta_data.FieldMetaData("booking", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Booking.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBooking_args.class, metaDataMap);
    }

    public updateBooking_args() {
    }

    public updateBooking_args(
      Booking booking)
    {
      this();
      this.booking = booking;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBooking_args(updateBooking_args other) {
      if (other.isSetBooking()) {
        this.booking = new Booking(other.booking);
      }
    }

    public updateBooking_args deepCopy() {
      return new updateBooking_args(this);
    }

    @Override
    public void clear() {
      this.booking = null;
    }

    public Booking getBooking() {
      return this.booking;
    }

    public updateBooking_args setBooking(Booking booking) {
      this.booking = booking;
      return this;
    }

    public void unsetBooking() {
      this.booking = null;
    }

    /** Returns true if field booking is set (has been assigned a value) and false otherwise */
    public boolean isSetBooking() {
      return this.booking != null;
    }

    public void setBookingIsSet(boolean value) {
      if (!value) {
        this.booking = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BOOKING:
        if (value == null) {
          unsetBooking();
        } else {
          setBooking((Booking)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BOOKING:
        return getBooking();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BOOKING:
        return isSetBooking();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBooking_args)
        return this.equals((updateBooking_args)that);
      return false;
    }

    public boolean equals(updateBooking_args that) {
      if (that == null)
        return false;

      boolean this_present_booking = true && this.isSetBooking();
      boolean that_present_booking = true && that.isSetBooking();
      if (this_present_booking || that_present_booking) {
        if (!(this_present_booking && that_present_booking))
          return false;
        if (!this.booking.equals(that.booking))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_booking = true && (isSetBooking());
      list.add(present_booking);
      if (present_booking)
        list.add(booking);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateBooking_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBooking()).compareTo(other.isSetBooking());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBooking()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.booking, other.booking);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBooking_args(");
      boolean first = true;

      sb.append("booking:");
      if (this.booking == null) {
        sb.append("null");
      } else {
        sb.append(this.booking);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (booking != null) {
        booking.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBooking_argsStandardSchemeFactory implements SchemeFactory {
      public updateBooking_argsStandardScheme getScheme() {
        return new updateBooking_argsStandardScheme();
      }
    }

    private static class updateBooking_argsStandardScheme extends StandardScheme<updateBooking_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBooking_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOOKING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.booking = new Booking();
                struct.booking.read(iprot);
                struct.setBookingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBooking_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.booking != null) {
          oprot.writeFieldBegin(BOOKING_FIELD_DESC);
          struct.booking.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBooking_argsTupleSchemeFactory implements SchemeFactory {
      public updateBooking_argsTupleScheme getScheme() {
        return new updateBooking_argsTupleScheme();
      }
    }

    private static class updateBooking_argsTupleScheme extends TupleScheme<updateBooking_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBooking_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBooking()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBooking()) {
          struct.booking.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBooking_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.booking = new Booking();
          struct.booking.read(iprot);
          struct.setBookingIsSet(true);
        }
      }
    }

  }

  public static class updateBooking_result implements org.apache.thrift.TBase<updateBooking_result, updateBooking_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateBooking_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBooking_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateBooking_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateBooking_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBooking_result.class, metaDataMap);
    }

    public updateBooking_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBooking_result(updateBooking_result other) {
    }

    public updateBooking_result deepCopy() {
      return new updateBooking_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBooking_result)
        return this.equals((updateBooking_result)that);
      return false;
    }

    public boolean equals(updateBooking_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(updateBooking_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBooking_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBooking_resultStandardSchemeFactory implements SchemeFactory {
      public updateBooking_resultStandardScheme getScheme() {
        return new updateBooking_resultStandardScheme();
      }
    }

    private static class updateBooking_resultStandardScheme extends StandardScheme<updateBooking_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBooking_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBooking_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBooking_resultTupleSchemeFactory implements SchemeFactory {
      public updateBooking_resultTupleScheme getScheme() {
        return new updateBooking_resultTupleScheme();
      }
    }

    private static class updateBooking_resultTupleScheme extends TupleScheme<updateBooking_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBooking_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBooking_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class deleteBookingRoom_args implements org.apache.thrift.TBase<deleteBookingRoom_args, deleteBookingRoom_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteBookingRoom_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteBookingRoom_args");

    private static final org.apache.thrift.protocol.TField BOOKING_FIELD_DESC = new org.apache.thrift.protocol.TField("booking", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteBookingRoom_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteBookingRoom_argsTupleSchemeFactory());
    }

    public Booking booking; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOOKING((short)1, "booking");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOOKING
            return BOOKING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOOKING, new org.apache.thrift.meta_data.FieldMetaData("booking", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Booking.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBookingRoom_args.class, metaDataMap);
    }

    public deleteBookingRoom_args() {
    }

    public deleteBookingRoom_args(
      Booking booking)
    {
      this();
      this.booking = booking;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteBookingRoom_args(deleteBookingRoom_args other) {
      if (other.isSetBooking()) {
        this.booking = new Booking(other.booking);
      }
    }

    public deleteBookingRoom_args deepCopy() {
      return new deleteBookingRoom_args(this);
    }

    @Override
    public void clear() {
      this.booking = null;
    }

    public Booking getBooking() {
      return this.booking;
    }

    public deleteBookingRoom_args setBooking(Booking booking) {
      this.booking = booking;
      return this;
    }

    public void unsetBooking() {
      this.booking = null;
    }

    /** Returns true if field booking is set (has been assigned a value) and false otherwise */
    public boolean isSetBooking() {
      return this.booking != null;
    }

    public void setBookingIsSet(boolean value) {
      if (!value) {
        this.booking = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BOOKING:
        if (value == null) {
          unsetBooking();
        } else {
          setBooking((Booking)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BOOKING:
        return getBooking();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BOOKING:
        return isSetBooking();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteBookingRoom_args)
        return this.equals((deleteBookingRoom_args)that);
      return false;
    }

    public boolean equals(deleteBookingRoom_args that) {
      if (that == null)
        return false;

      boolean this_present_booking = true && this.isSetBooking();
      boolean that_present_booking = true && that.isSetBooking();
      if (this_present_booking || that_present_booking) {
        if (!(this_present_booking && that_present_booking))
          return false;
        if (!this.booking.equals(that.booking))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_booking = true && (isSetBooking());
      list.add(present_booking);
      if (present_booking)
        list.add(booking);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteBookingRoom_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBooking()).compareTo(other.isSetBooking());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBooking()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.booking, other.booking);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteBookingRoom_args(");
      boolean first = true;

      sb.append("booking:");
      if (this.booking == null) {
        sb.append("null");
      } else {
        sb.append(this.booking);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (booking != null) {
        booking.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteBookingRoom_argsStandardSchemeFactory implements SchemeFactory {
      public deleteBookingRoom_argsStandardScheme getScheme() {
        return new deleteBookingRoom_argsStandardScheme();
      }
    }

    private static class deleteBookingRoom_argsStandardScheme extends StandardScheme<deleteBookingRoom_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBookingRoom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOOKING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.booking = new Booking();
                struct.booking.read(iprot);
                struct.setBookingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBookingRoom_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.booking != null) {
          oprot.writeFieldBegin(BOOKING_FIELD_DESC);
          struct.booking.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteBookingRoom_argsTupleSchemeFactory implements SchemeFactory {
      public deleteBookingRoom_argsTupleScheme getScheme() {
        return new deleteBookingRoom_argsTupleScheme();
      }
    }

    private static class deleteBookingRoom_argsTupleScheme extends TupleScheme<deleteBookingRoom_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteBookingRoom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBooking()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBooking()) {
          struct.booking.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteBookingRoom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.booking = new Booking();
          struct.booking.read(iprot);
          struct.setBookingIsSet(true);
        }
      }
    }

  }

  public static class deleteBookingRoom_result implements org.apache.thrift.TBase<deleteBookingRoom_result, deleteBookingRoom_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteBookingRoom_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteBookingRoom_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteBookingRoom_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteBookingRoom_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBookingRoom_result.class, metaDataMap);
    }

    public deleteBookingRoom_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteBookingRoom_result(deleteBookingRoom_result other) {
    }

    public deleteBookingRoom_result deepCopy() {
      return new deleteBookingRoom_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteBookingRoom_result)
        return this.equals((deleteBookingRoom_result)that);
      return false;
    }

    public boolean equals(deleteBookingRoom_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteBookingRoom_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteBookingRoom_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteBookingRoom_resultStandardSchemeFactory implements SchemeFactory {
      public deleteBookingRoom_resultStandardScheme getScheme() {
        return new deleteBookingRoom_resultStandardScheme();
      }
    }

    private static class deleteBookingRoom_resultStandardScheme extends StandardScheme<deleteBookingRoom_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBookingRoom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBookingRoom_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteBookingRoom_resultTupleSchemeFactory implements SchemeFactory {
      public deleteBookingRoom_resultTupleScheme getScheme() {
        return new deleteBookingRoom_resultTupleScheme();
      }
    }

    private static class deleteBookingRoom_resultTupleScheme extends TupleScheme<deleteBookingRoom_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteBookingRoom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteBookingRoom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class makeBookingRoom_args implements org.apache.thrift.TBase<makeBookingRoom_args, makeBookingRoom_args._Fields>, java.io.Serializable, Cloneable, Comparable<makeBookingRoom_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("makeBookingRoom_args");

    private static final org.apache.thrift.protocol.TField ROOM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("roomType", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BOOKING_FIELD_DESC = new org.apache.thrift.protocol.TField("booking", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField GUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("guest", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new makeBookingRoom_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new makeBookingRoom_argsTupleSchemeFactory());
    }

    public RoomType roomType; // required
    public Booking booking; // required
    public Guest guest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROOM_TYPE((short)1, "roomType"),
      BOOKING((short)2, "booking"),
      GUEST((short)3, "guest");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROOM_TYPE
            return ROOM_TYPE;
          case 2: // BOOKING
            return BOOKING;
          case 3: // GUEST
            return GUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROOM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("roomType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RoomType.class)));
      tmpMap.put(_Fields.BOOKING, new org.apache.thrift.meta_data.FieldMetaData("booking", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Booking.class)));
      tmpMap.put(_Fields.GUEST, new org.apache.thrift.meta_data.FieldMetaData("guest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Guest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(makeBookingRoom_args.class, metaDataMap);
    }

    public makeBookingRoom_args() {
    }

    public makeBookingRoom_args(
      RoomType roomType,
      Booking booking,
      Guest guest)
    {
      this();
      this.roomType = roomType;
      this.booking = booking;
      this.guest = guest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public makeBookingRoom_args(makeBookingRoom_args other) {
      if (other.isSetRoomType()) {
        this.roomType = new RoomType(other.roomType);
      }
      if (other.isSetBooking()) {
        this.booking = new Booking(other.booking);
      }
      if (other.isSetGuest()) {
        this.guest = new Guest(other.guest);
      }
    }

    public makeBookingRoom_args deepCopy() {
      return new makeBookingRoom_args(this);
    }

    @Override
    public void clear() {
      this.roomType = null;
      this.booking = null;
      this.guest = null;
    }

    public RoomType getRoomType() {
      return this.roomType;
    }

    public makeBookingRoom_args setRoomType(RoomType roomType) {
      this.roomType = roomType;
      return this;
    }

    public void unsetRoomType() {
      this.roomType = null;
    }

    /** Returns true if field roomType is set (has been assigned a value) and false otherwise */
    public boolean isSetRoomType() {
      return this.roomType != null;
    }

    public void setRoomTypeIsSet(boolean value) {
      if (!value) {
        this.roomType = null;
      }
    }

    public Booking getBooking() {
      return this.booking;
    }

    public makeBookingRoom_args setBooking(Booking booking) {
      this.booking = booking;
      return this;
    }

    public void unsetBooking() {
      this.booking = null;
    }

    /** Returns true if field booking is set (has been assigned a value) and false otherwise */
    public boolean isSetBooking() {
      return this.booking != null;
    }

    public void setBookingIsSet(boolean value) {
      if (!value) {
        this.booking = null;
      }
    }

    public Guest getGuest() {
      return this.guest;
    }

    public makeBookingRoom_args setGuest(Guest guest) {
      this.guest = guest;
      return this;
    }

    public void unsetGuest() {
      this.guest = null;
    }

    /** Returns true if field guest is set (has been assigned a value) and false otherwise */
    public boolean isSetGuest() {
      return this.guest != null;
    }

    public void setGuestIsSet(boolean value) {
      if (!value) {
        this.guest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROOM_TYPE:
        if (value == null) {
          unsetRoomType();
        } else {
          setRoomType((RoomType)value);
        }
        break;

      case BOOKING:
        if (value == null) {
          unsetBooking();
        } else {
          setBooking((Booking)value);
        }
        break;

      case GUEST:
        if (value == null) {
          unsetGuest();
        } else {
          setGuest((Guest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROOM_TYPE:
        return getRoomType();

      case BOOKING:
        return getBooking();

      case GUEST:
        return getGuest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROOM_TYPE:
        return isSetRoomType();
      case BOOKING:
        return isSetBooking();
      case GUEST:
        return isSetGuest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof makeBookingRoom_args)
        return this.equals((makeBookingRoom_args)that);
      return false;
    }

    public boolean equals(makeBookingRoom_args that) {
      if (that == null)
        return false;

      boolean this_present_roomType = true && this.isSetRoomType();
      boolean that_present_roomType = true && that.isSetRoomType();
      if (this_present_roomType || that_present_roomType) {
        if (!(this_present_roomType && that_present_roomType))
          return false;
        if (!this.roomType.equals(that.roomType))
          return false;
      }

      boolean this_present_booking = true && this.isSetBooking();
      boolean that_present_booking = true && that.isSetBooking();
      if (this_present_booking || that_present_booking) {
        if (!(this_present_booking && that_present_booking))
          return false;
        if (!this.booking.equals(that.booking))
          return false;
      }

      boolean this_present_guest = true && this.isSetGuest();
      boolean that_present_guest = true && that.isSetGuest();
      if (this_present_guest || that_present_guest) {
        if (!(this_present_guest && that_present_guest))
          return false;
        if (!this.guest.equals(that.guest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_roomType = true && (isSetRoomType());
      list.add(present_roomType);
      if (present_roomType)
        list.add(roomType);

      boolean present_booking = true && (isSetBooking());
      list.add(present_booking);
      if (present_booking)
        list.add(booking);

      boolean present_guest = true && (isSetGuest());
      list.add(present_guest);
      if (present_guest)
        list.add(guest);

      return list.hashCode();
    }

    @Override
    public int compareTo(makeBookingRoom_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRoomType()).compareTo(other.isSetRoomType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoomType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomType, other.roomType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBooking()).compareTo(other.isSetBooking());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBooking()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.booking, other.booking);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGuest()).compareTo(other.isSetGuest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guest, other.guest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("makeBookingRoom_args(");
      boolean first = true;

      sb.append("roomType:");
      if (this.roomType == null) {
        sb.append("null");
      } else {
        sb.append(this.roomType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("booking:");
      if (this.booking == null) {
        sb.append("null");
      } else {
        sb.append(this.booking);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guest:");
      if (this.guest == null) {
        sb.append("null");
      } else {
        sb.append(this.guest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (roomType != null) {
        roomType.validate();
      }
      if (booking != null) {
        booking.validate();
      }
      if (guest != null) {
        guest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class makeBookingRoom_argsStandardSchemeFactory implements SchemeFactory {
      public makeBookingRoom_argsStandardScheme getScheme() {
        return new makeBookingRoom_argsStandardScheme();
      }
    }

    private static class makeBookingRoom_argsStandardScheme extends StandardScheme<makeBookingRoom_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, makeBookingRoom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROOM_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.roomType = new RoomType();
                struct.roomType.read(iprot);
                struct.setRoomTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BOOKING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.booking = new Booking();
                struct.booking.read(iprot);
                struct.setBookingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // GUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.guest = new Guest();
                struct.guest.read(iprot);
                struct.setGuestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, makeBookingRoom_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.roomType != null) {
          oprot.writeFieldBegin(ROOM_TYPE_FIELD_DESC);
          struct.roomType.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.booking != null) {
          oprot.writeFieldBegin(BOOKING_FIELD_DESC);
          struct.booking.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.guest != null) {
          oprot.writeFieldBegin(GUEST_FIELD_DESC);
          struct.guest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class makeBookingRoom_argsTupleSchemeFactory implements SchemeFactory {
      public makeBookingRoom_argsTupleScheme getScheme() {
        return new makeBookingRoom_argsTupleScheme();
      }
    }

    private static class makeBookingRoom_argsTupleScheme extends TupleScheme<makeBookingRoom_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, makeBookingRoom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRoomType()) {
          optionals.set(0);
        }
        if (struct.isSetBooking()) {
          optionals.set(1);
        }
        if (struct.isSetGuest()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRoomType()) {
          struct.roomType.write(oprot);
        }
        if (struct.isSetBooking()) {
          struct.booking.write(oprot);
        }
        if (struct.isSetGuest()) {
          struct.guest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, makeBookingRoom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.roomType = new RoomType();
          struct.roomType.read(iprot);
          struct.setRoomTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.booking = new Booking();
          struct.booking.read(iprot);
          struct.setBookingIsSet(true);
        }
        if (incoming.get(2)) {
          struct.guest = new Guest();
          struct.guest.read(iprot);
          struct.setGuestIsSet(true);
        }
      }
    }

  }

  public static class makeBookingRoom_result implements org.apache.thrift.TBase<makeBookingRoom_result, makeBookingRoom_result._Fields>, java.io.Serializable, Cloneable, Comparable<makeBookingRoom_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("makeBookingRoom_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new makeBookingRoom_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new makeBookingRoom_resultTupleSchemeFactory());
    }

    public BookingRoom success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BookingRoom.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(makeBookingRoom_result.class, metaDataMap);
    }

    public makeBookingRoom_result() {
    }

    public makeBookingRoom_result(
      BookingRoom success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public makeBookingRoom_result(makeBookingRoom_result other) {
      if (other.isSetSuccess()) {
        this.success = new BookingRoom(other.success);
      }
    }

    public makeBookingRoom_result deepCopy() {
      return new makeBookingRoom_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public BookingRoom getSuccess() {
      return this.success;
    }

    public makeBookingRoom_result setSuccess(BookingRoom success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BookingRoom)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof makeBookingRoom_result)
        return this.equals((makeBookingRoom_result)that);
      return false;
    }

    public boolean equals(makeBookingRoom_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(makeBookingRoom_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("makeBookingRoom_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class makeBookingRoom_resultStandardSchemeFactory implements SchemeFactory {
      public makeBookingRoom_resultStandardScheme getScheme() {
        return new makeBookingRoom_resultStandardScheme();
      }
    }

    private static class makeBookingRoom_resultStandardScheme extends StandardScheme<makeBookingRoom_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, makeBookingRoom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BookingRoom();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, makeBookingRoom_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class makeBookingRoom_resultTupleSchemeFactory implements SchemeFactory {
      public makeBookingRoom_resultTupleScheme getScheme() {
        return new makeBookingRoom_resultTupleScheme();
      }
    }

    private static class makeBookingRoom_resultTupleScheme extends TupleScheme<makeBookingRoom_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, makeBookingRoom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, makeBookingRoom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new BookingRoom();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createHotel_args implements org.apache.thrift.TBase<createHotel_args, createHotel_args._Fields>, java.io.Serializable, Cloneable, Comparable<createHotel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createHotel_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField HOTEL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("hotelType", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createHotel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createHotel_argsTupleSchemeFactory());
    }

    public String name; // required
    public Location location; // required
    public HotelType hotelType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name"),
      LOCATION((short)2, "location"),
      HOTEL_TYPE((short)3, "hotelType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          case 2: // LOCATION
            return LOCATION;
          case 3: // HOTEL_TYPE
            return HOTEL_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Location.class)));
      tmpMap.put(_Fields.HOTEL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("hotelType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HotelType.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createHotel_args.class, metaDataMap);
    }

    public createHotel_args() {
    }

    public createHotel_args(
      String name,
      Location location,
      HotelType hotelType)
    {
      this();
      this.name = name;
      this.location = location;
      this.hotelType = hotelType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createHotel_args(createHotel_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetLocation()) {
        this.location = new Location(other.location);
      }
      if (other.isSetHotelType()) {
        this.hotelType = new HotelType(other.hotelType);
      }
    }

    public createHotel_args deepCopy() {
      return new createHotel_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
      this.location = null;
      this.hotelType = null;
    }

    public String getName() {
      return this.name;
    }

    public createHotel_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public Location getLocation() {
      return this.location;
    }

    public createHotel_args setLocation(Location location) {
      this.location = location;
      return this;
    }

    public void unsetLocation() {
      this.location = null;
    }

    /** Returns true if field location is set (has been assigned a value) and false otherwise */
    public boolean isSetLocation() {
      return this.location != null;
    }

    public void setLocationIsSet(boolean value) {
      if (!value) {
        this.location = null;
      }
    }

    public HotelType getHotelType() {
      return this.hotelType;
    }

    public createHotel_args setHotelType(HotelType hotelType) {
      this.hotelType = hotelType;
      return this;
    }

    public void unsetHotelType() {
      this.hotelType = null;
    }

    /** Returns true if field hotelType is set (has been assigned a value) and false otherwise */
    public boolean isSetHotelType() {
      return this.hotelType != null;
    }

    public void setHotelTypeIsSet(boolean value) {
      if (!value) {
        this.hotelType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case LOCATION:
        if (value == null) {
          unsetLocation();
        } else {
          setLocation((Location)value);
        }
        break;

      case HOTEL_TYPE:
        if (value == null) {
          unsetHotelType();
        } else {
          setHotelType((HotelType)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      case LOCATION:
        return getLocation();

      case HOTEL_TYPE:
        return getHotelType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      case LOCATION:
        return isSetLocation();
      case HOTEL_TYPE:
        return isSetHotelType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createHotel_args)
        return this.equals((createHotel_args)that);
      return false;
    }

    public boolean equals(createHotel_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_location = true && this.isSetLocation();
      boolean that_present_location = true && that.isSetLocation();
      if (this_present_location || that_present_location) {
        if (!(this_present_location && that_present_location))
          return false;
        if (!this.location.equals(that.location))
          return false;
      }

      boolean this_present_hotelType = true && this.isSetHotelType();
      boolean that_present_hotelType = true && that.isSetHotelType();
      if (this_present_hotelType || that_present_hotelType) {
        if (!(this_present_hotelType && that_present_hotelType))
          return false;
        if (!this.hotelType.equals(that.hotelType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      boolean present_location = true && (isSetLocation());
      list.add(present_location);
      if (present_location)
        list.add(location);

      boolean present_hotelType = true && (isSetHotelType());
      list.add(present_hotelType);
      if (present_hotelType)
        list.add(hotelType);

      return list.hashCode();
    }

    @Override
    public int compareTo(createHotel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLocation()).compareTo(other.isSetLocation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocation()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, other.location);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHotelType()).compareTo(other.isSetHotelType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHotelType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hotelType, other.hotelType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createHotel_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hotelType:");
      if (this.hotelType == null) {
        sb.append("null");
      } else {
        sb.append(this.hotelType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (location != null) {
        location.validate();
      }
      if (hotelType != null) {
        hotelType.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createHotel_argsStandardSchemeFactory implements SchemeFactory {
      public createHotel_argsStandardScheme getScheme() {
        return new createHotel_argsStandardScheme();
      }
    }

    private static class createHotel_argsStandardScheme extends StandardScheme<createHotel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createHotel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.location = new Location();
                struct.location.read(iprot);
                struct.setLocationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // HOTEL_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.hotelType = new HotelType();
                struct.hotelType.read(iprot);
                struct.setHotelTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createHotel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.location != null) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          struct.location.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.hotelType != null) {
          oprot.writeFieldBegin(HOTEL_TYPE_FIELD_DESC);
          struct.hotelType.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createHotel_argsTupleSchemeFactory implements SchemeFactory {
      public createHotel_argsTupleScheme getScheme() {
        return new createHotel_argsTupleScheme();
      }
    }

    private static class createHotel_argsTupleScheme extends TupleScheme<createHotel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createHotel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetName()) {
          optionals.set(0);
        }
        if (struct.isSetLocation()) {
          optionals.set(1);
        }
        if (struct.isSetHotelType()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetLocation()) {
          struct.location.write(oprot);
        }
        if (struct.isSetHotelType()) {
          struct.hotelType.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createHotel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.location = new Location();
          struct.location.read(iprot);
          struct.setLocationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.hotelType = new HotelType();
          struct.hotelType.read(iprot);
          struct.setHotelTypeIsSet(true);
        }
      }
    }

  }

  public static class createHotel_result implements org.apache.thrift.TBase<createHotel_result, createHotel_result._Fields>, java.io.Serializable, Cloneable, Comparable<createHotel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createHotel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createHotel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createHotel_resultTupleSchemeFactory());
    }

    public Hotel success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Hotel.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createHotel_result.class, metaDataMap);
    }

    public createHotel_result() {
    }

    public createHotel_result(
      Hotel success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createHotel_result(createHotel_result other) {
      if (other.isSetSuccess()) {
        this.success = new Hotel(other.success);
      }
    }

    public createHotel_result deepCopy() {
      return new createHotel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Hotel getSuccess() {
      return this.success;
    }

    public createHotel_result setSuccess(Hotel success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Hotel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createHotel_result)
        return this.equals((createHotel_result)that);
      return false;
    }

    public boolean equals(createHotel_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(createHotel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createHotel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createHotel_resultStandardSchemeFactory implements SchemeFactory {
      public createHotel_resultStandardScheme getScheme() {
        return new createHotel_resultStandardScheme();
      }
    }

    private static class createHotel_resultStandardScheme extends StandardScheme<createHotel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createHotel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Hotel();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createHotel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createHotel_resultTupleSchemeFactory implements SchemeFactory {
      public createHotel_resultTupleScheme getScheme() {
        return new createHotel_resultTupleScheme();
      }
    }

    private static class createHotel_resultTupleScheme extends TupleScheme<createHotel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createHotel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createHotel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Hotel();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createLocation_args implements org.apache.thrift.TBase<createLocation_args, createLocation_args._Fields>, java.io.Serializable, Cloneable, Comparable<createLocation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createLocation_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createLocation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createLocation_argsTupleSchemeFactory());
    }

    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createLocation_args.class, metaDataMap);
    }

    public createLocation_args() {
    }

    public createLocation_args(
      String name)
    {
      this();
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createLocation_args(createLocation_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public createLocation_args deepCopy() {
      return new createLocation_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
    }

    public String getName() {
      return this.name;
    }

    public createLocation_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createLocation_args)
        return this.equals((createLocation_args)that);
      return false;
    }

    public boolean equals(createLocation_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      return list.hashCode();
    }

    @Override
    public int compareTo(createLocation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createLocation_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createLocation_argsStandardSchemeFactory implements SchemeFactory {
      public createLocation_argsStandardScheme getScheme() {
        return new createLocation_argsStandardScheme();
      }
    }

    private static class createLocation_argsStandardScheme extends StandardScheme<createLocation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createLocation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createLocation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createLocation_argsTupleSchemeFactory implements SchemeFactory {
      public createLocation_argsTupleScheme getScheme() {
        return new createLocation_argsTupleScheme();
      }
    }

    private static class createLocation_argsTupleScheme extends TupleScheme<createLocation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createLocation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createLocation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class createLocation_result implements org.apache.thrift.TBase<createLocation_result, createLocation_result._Fields>, java.io.Serializable, Cloneable, Comparable<createLocation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createLocation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createLocation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createLocation_resultTupleSchemeFactory());
    }

    public Location success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Location.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createLocation_result.class, metaDataMap);
    }

    public createLocation_result() {
    }

    public createLocation_result(
      Location success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createLocation_result(createLocation_result other) {
      if (other.isSetSuccess()) {
        this.success = new Location(other.success);
      }
    }

    public createLocation_result deepCopy() {
      return new createLocation_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Location getSuccess() {
      return this.success;
    }

    public createLocation_result setSuccess(Location success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Location)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createLocation_result)
        return this.equals((createLocation_result)that);
      return false;
    }

    public boolean equals(createLocation_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(createLocation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createLocation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createLocation_resultStandardSchemeFactory implements SchemeFactory {
      public createLocation_resultStandardScheme getScheme() {
        return new createLocation_resultStandardScheme();
      }
    }

    private static class createLocation_resultStandardScheme extends StandardScheme<createLocation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createLocation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Location();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createLocation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createLocation_resultTupleSchemeFactory implements SchemeFactory {
      public createLocation_resultTupleScheme getScheme() {
        return new createLocation_resultTupleScheme();
      }
    }

    private static class createLocation_resultTupleScheme extends TupleScheme<createLocation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createLocation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createLocation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Location();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createHotelType_args implements org.apache.thrift.TBase<createHotelType_args, createHotelType_args._Fields>, java.io.Serializable, Cloneable, Comparable<createHotelType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createHotelType_args");

    private static final org.apache.thrift.protocol.TField HOTEL_TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hotelTypeName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createHotelType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createHotelType_argsTupleSchemeFactory());
    }

    public String hotelTypeName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOTEL_TYPE_NAME((short)1, "hotelTypeName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOTEL_TYPE_NAME
            return HOTEL_TYPE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOTEL_TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("hotelTypeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createHotelType_args.class, metaDataMap);
    }

    public createHotelType_args() {
    }

    public createHotelType_args(
      String hotelTypeName)
    {
      this();
      this.hotelTypeName = hotelTypeName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createHotelType_args(createHotelType_args other) {
      if (other.isSetHotelTypeName()) {
        this.hotelTypeName = other.hotelTypeName;
      }
    }

    public createHotelType_args deepCopy() {
      return new createHotelType_args(this);
    }

    @Override
    public void clear() {
      this.hotelTypeName = null;
    }

    public String getHotelTypeName() {
      return this.hotelTypeName;
    }

    public createHotelType_args setHotelTypeName(String hotelTypeName) {
      this.hotelTypeName = hotelTypeName;
      return this;
    }

    public void unsetHotelTypeName() {
      this.hotelTypeName = null;
    }

    /** Returns true if field hotelTypeName is set (has been assigned a value) and false otherwise */
    public boolean isSetHotelTypeName() {
      return this.hotelTypeName != null;
    }

    public void setHotelTypeNameIsSet(boolean value) {
      if (!value) {
        this.hotelTypeName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HOTEL_TYPE_NAME:
        if (value == null) {
          unsetHotelTypeName();
        } else {
          setHotelTypeName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HOTEL_TYPE_NAME:
        return getHotelTypeName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HOTEL_TYPE_NAME:
        return isSetHotelTypeName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createHotelType_args)
        return this.equals((createHotelType_args)that);
      return false;
    }

    public boolean equals(createHotelType_args that) {
      if (that == null)
        return false;

      boolean this_present_hotelTypeName = true && this.isSetHotelTypeName();
      boolean that_present_hotelTypeName = true && that.isSetHotelTypeName();
      if (this_present_hotelTypeName || that_present_hotelTypeName) {
        if (!(this_present_hotelTypeName && that_present_hotelTypeName))
          return false;
        if (!this.hotelTypeName.equals(that.hotelTypeName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_hotelTypeName = true && (isSetHotelTypeName());
      list.add(present_hotelTypeName);
      if (present_hotelTypeName)
        list.add(hotelTypeName);

      return list.hashCode();
    }

    @Override
    public int compareTo(createHotelType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHotelTypeName()).compareTo(other.isSetHotelTypeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHotelTypeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hotelTypeName, other.hotelTypeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createHotelType_args(");
      boolean first = true;

      sb.append("hotelTypeName:");
      if (this.hotelTypeName == null) {
        sb.append("null");
      } else {
        sb.append(this.hotelTypeName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createHotelType_argsStandardSchemeFactory implements SchemeFactory {
      public createHotelType_argsStandardScheme getScheme() {
        return new createHotelType_argsStandardScheme();
      }
    }

    private static class createHotelType_argsStandardScheme extends StandardScheme<createHotelType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createHotelType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOTEL_TYPE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hotelTypeName = iprot.readString();
                struct.setHotelTypeNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createHotelType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hotelTypeName != null) {
          oprot.writeFieldBegin(HOTEL_TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.hotelTypeName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createHotelType_argsTupleSchemeFactory implements SchemeFactory {
      public createHotelType_argsTupleScheme getScheme() {
        return new createHotelType_argsTupleScheme();
      }
    }

    private static class createHotelType_argsTupleScheme extends TupleScheme<createHotelType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createHotelType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHotelTypeName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHotelTypeName()) {
          oprot.writeString(struct.hotelTypeName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createHotelType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.hotelTypeName = iprot.readString();
          struct.setHotelTypeNameIsSet(true);
        }
      }
    }

  }

  public static class createHotelType_result implements org.apache.thrift.TBase<createHotelType_result, createHotelType_result._Fields>, java.io.Serializable, Cloneable, Comparable<createHotelType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createHotelType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createHotelType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createHotelType_resultTupleSchemeFactory());
    }

    public HotelType success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HotelType.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createHotelType_result.class, metaDataMap);
    }

    public createHotelType_result() {
    }

    public createHotelType_result(
      HotelType success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createHotelType_result(createHotelType_result other) {
      if (other.isSetSuccess()) {
        this.success = new HotelType(other.success);
      }
    }

    public createHotelType_result deepCopy() {
      return new createHotelType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public HotelType getSuccess() {
      return this.success;
    }

    public createHotelType_result setSuccess(HotelType success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((HotelType)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createHotelType_result)
        return this.equals((createHotelType_result)that);
      return false;
    }

    public boolean equals(createHotelType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(createHotelType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createHotelType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createHotelType_resultStandardSchemeFactory implements SchemeFactory {
      public createHotelType_resultStandardScheme getScheme() {
        return new createHotelType_resultStandardScheme();
      }
    }

    private static class createHotelType_resultStandardScheme extends StandardScheme<createHotelType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createHotelType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new HotelType();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createHotelType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createHotelType_resultTupleSchemeFactory implements SchemeFactory {
      public createHotelType_resultTupleScheme getScheme() {
        return new createHotelType_resultTupleScheme();
      }
    }

    private static class createHotelType_resultTupleScheme extends TupleScheme<createHotelType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createHotelType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createHotelType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new HotelType();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createRoomType_args implements org.apache.thrift.TBase<createRoomType_args, createRoomType_args._Fields>, java.io.Serializable, Cloneable, Comparable<createRoomType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createRoomType_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField HOTEL_FIELD_DESC = new org.apache.thrift.protocol.TField("hotel", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ROOM_RATE_PER_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("roomRatePerDay", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
    private static final org.apache.thrift.protocol.TField MAX_NUMBER_OF_PEOPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("maxNumberOfPeople", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createRoomType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createRoomType_argsTupleSchemeFactory());
    }

    public String name; // required
    public Hotel hotel; // required
    public double roomRatePerDay; // required
    public int maxNumberOfPeople; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name"),
      HOTEL((short)2, "hotel"),
      ROOM_RATE_PER_DAY((short)3, "roomRatePerDay"),
      MAX_NUMBER_OF_PEOPLE((short)4, "maxNumberOfPeople");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          case 2: // HOTEL
            return HOTEL;
          case 3: // ROOM_RATE_PER_DAY
            return ROOM_RATE_PER_DAY;
          case 4: // MAX_NUMBER_OF_PEOPLE
            return MAX_NUMBER_OF_PEOPLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROOMRATEPERDAY_ISSET_ID = 0;
    private static final int __MAXNUMBEROFPEOPLE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOTEL, new org.apache.thrift.meta_data.FieldMetaData("hotel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Hotel.class)));
      tmpMap.put(_Fields.ROOM_RATE_PER_DAY, new org.apache.thrift.meta_data.FieldMetaData("roomRatePerDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.MAX_NUMBER_OF_PEOPLE, new org.apache.thrift.meta_data.FieldMetaData("maxNumberOfPeople", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createRoomType_args.class, metaDataMap);
    }

    public createRoomType_args() {
    }

    public createRoomType_args(
      String name,
      Hotel hotel,
      double roomRatePerDay,
      int maxNumberOfPeople)
    {
      this();
      this.name = name;
      this.hotel = hotel;
      this.roomRatePerDay = roomRatePerDay;
      setRoomRatePerDayIsSet(true);
      this.maxNumberOfPeople = maxNumberOfPeople;
      setMaxNumberOfPeopleIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createRoomType_args(createRoomType_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetHotel()) {
        this.hotel = new Hotel(other.hotel);
      }
      this.roomRatePerDay = other.roomRatePerDay;
      this.maxNumberOfPeople = other.maxNumberOfPeople;
    }

    public createRoomType_args deepCopy() {
      return new createRoomType_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
      this.hotel = null;
      setRoomRatePerDayIsSet(false);
      this.roomRatePerDay = 0.0;
      setMaxNumberOfPeopleIsSet(false);
      this.maxNumberOfPeople = 0;
    }

    public String getName() {
      return this.name;
    }

    public createRoomType_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public Hotel getHotel() {
      return this.hotel;
    }

    public createRoomType_args setHotel(Hotel hotel) {
      this.hotel = hotel;
      return this;
    }

    public void unsetHotel() {
      this.hotel = null;
    }

    /** Returns true if field hotel is set (has been assigned a value) and false otherwise */
    public boolean isSetHotel() {
      return this.hotel != null;
    }

    public void setHotelIsSet(boolean value) {
      if (!value) {
        this.hotel = null;
      }
    }

    public double getRoomRatePerDay() {
      return this.roomRatePerDay;
    }

    public createRoomType_args setRoomRatePerDay(double roomRatePerDay) {
      this.roomRatePerDay = roomRatePerDay;
      setRoomRatePerDayIsSet(true);
      return this;
    }

    public void unsetRoomRatePerDay() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROOMRATEPERDAY_ISSET_ID);
    }

    /** Returns true if field roomRatePerDay is set (has been assigned a value) and false otherwise */
    public boolean isSetRoomRatePerDay() {
      return EncodingUtils.testBit(__isset_bitfield, __ROOMRATEPERDAY_ISSET_ID);
    }

    public void setRoomRatePerDayIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROOMRATEPERDAY_ISSET_ID, value);
    }

    public int getMaxNumberOfPeople() {
      return this.maxNumberOfPeople;
    }

    public createRoomType_args setMaxNumberOfPeople(int maxNumberOfPeople) {
      this.maxNumberOfPeople = maxNumberOfPeople;
      setMaxNumberOfPeopleIsSet(true);
      return this;
    }

    public void unsetMaxNumberOfPeople() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXNUMBEROFPEOPLE_ISSET_ID);
    }

    /** Returns true if field maxNumberOfPeople is set (has been assigned a value) and false otherwise */
    public boolean isSetMaxNumberOfPeople() {
      return EncodingUtils.testBit(__isset_bitfield, __MAXNUMBEROFPEOPLE_ISSET_ID);
    }

    public void setMaxNumberOfPeopleIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXNUMBEROFPEOPLE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case HOTEL:
        if (value == null) {
          unsetHotel();
        } else {
          setHotel((Hotel)value);
        }
        break;

      case ROOM_RATE_PER_DAY:
        if (value == null) {
          unsetRoomRatePerDay();
        } else {
          setRoomRatePerDay((Double)value);
        }
        break;

      case MAX_NUMBER_OF_PEOPLE:
        if (value == null) {
          unsetMaxNumberOfPeople();
        } else {
          setMaxNumberOfPeople((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      case HOTEL:
        return getHotel();

      case ROOM_RATE_PER_DAY:
        return Double.valueOf(getRoomRatePerDay());

      case MAX_NUMBER_OF_PEOPLE:
        return Integer.valueOf(getMaxNumberOfPeople());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      case HOTEL:
        return isSetHotel();
      case ROOM_RATE_PER_DAY:
        return isSetRoomRatePerDay();
      case MAX_NUMBER_OF_PEOPLE:
        return isSetMaxNumberOfPeople();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createRoomType_args)
        return this.equals((createRoomType_args)that);
      return false;
    }

    public boolean equals(createRoomType_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_hotel = true && this.isSetHotel();
      boolean that_present_hotel = true && that.isSetHotel();
      if (this_present_hotel || that_present_hotel) {
        if (!(this_present_hotel && that_present_hotel))
          return false;
        if (!this.hotel.equals(that.hotel))
          return false;
      }

      boolean this_present_roomRatePerDay = true;
      boolean that_present_roomRatePerDay = true;
      if (this_present_roomRatePerDay || that_present_roomRatePerDay) {
        if (!(this_present_roomRatePerDay && that_present_roomRatePerDay))
          return false;
        if (this.roomRatePerDay != that.roomRatePerDay)
          return false;
      }

      boolean this_present_maxNumberOfPeople = true;
      boolean that_present_maxNumberOfPeople = true;
      if (this_present_maxNumberOfPeople || that_present_maxNumberOfPeople) {
        if (!(this_present_maxNumberOfPeople && that_present_maxNumberOfPeople))
          return false;
        if (this.maxNumberOfPeople != that.maxNumberOfPeople)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      boolean present_hotel = true && (isSetHotel());
      list.add(present_hotel);
      if (present_hotel)
        list.add(hotel);

      boolean present_roomRatePerDay = true;
      list.add(present_roomRatePerDay);
      if (present_roomRatePerDay)
        list.add(roomRatePerDay);

      boolean present_maxNumberOfPeople = true;
      list.add(present_maxNumberOfPeople);
      if (present_maxNumberOfPeople)
        list.add(maxNumberOfPeople);

      return list.hashCode();
    }

    @Override
    public int compareTo(createRoomType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHotel()).compareTo(other.isSetHotel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHotel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hotel, other.hotel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRoomRatePerDay()).compareTo(other.isSetRoomRatePerDay());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoomRatePerDay()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomRatePerDay, other.roomRatePerDay);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMaxNumberOfPeople()).compareTo(other.isSetMaxNumberOfPeople());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaxNumberOfPeople()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxNumberOfPeople, other.maxNumberOfPeople);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createRoomType_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hotel:");
      if (this.hotel == null) {
        sb.append("null");
      } else {
        sb.append(this.hotel);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("roomRatePerDay:");
      sb.append(this.roomRatePerDay);
      first = false;
      if (!first) sb.append(", ");
      sb.append("maxNumberOfPeople:");
      sb.append(this.maxNumberOfPeople);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (hotel != null) {
        hotel.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createRoomType_argsStandardSchemeFactory implements SchemeFactory {
      public createRoomType_argsStandardScheme getScheme() {
        return new createRoomType_argsStandardScheme();
      }
    }

    private static class createRoomType_argsStandardScheme extends StandardScheme<createRoomType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createRoomType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HOTEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.hotel = new Hotel();
                struct.hotel.read(iprot);
                struct.setHotelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ROOM_RATE_PER_DAY
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.roomRatePerDay = iprot.readDouble();
                struct.setRoomRatePerDayIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MAX_NUMBER_OF_PEOPLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.maxNumberOfPeople = iprot.readI32();
                struct.setMaxNumberOfPeopleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createRoomType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.hotel != null) {
          oprot.writeFieldBegin(HOTEL_FIELD_DESC);
          struct.hotel.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ROOM_RATE_PER_DAY_FIELD_DESC);
        oprot.writeDouble(struct.roomRatePerDay);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MAX_NUMBER_OF_PEOPLE_FIELD_DESC);
        oprot.writeI32(struct.maxNumberOfPeople);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createRoomType_argsTupleSchemeFactory implements SchemeFactory {
      public createRoomType_argsTupleScheme getScheme() {
        return new createRoomType_argsTupleScheme();
      }
    }

    private static class createRoomType_argsTupleScheme extends TupleScheme<createRoomType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createRoomType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetName()) {
          optionals.set(0);
        }
        if (struct.isSetHotel()) {
          optionals.set(1);
        }
        if (struct.isSetRoomRatePerDay()) {
          optionals.set(2);
        }
        if (struct.isSetMaxNumberOfPeople()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetHotel()) {
          struct.hotel.write(oprot);
        }
        if (struct.isSetRoomRatePerDay()) {
          oprot.writeDouble(struct.roomRatePerDay);
        }
        if (struct.isSetMaxNumberOfPeople()) {
          oprot.writeI32(struct.maxNumberOfPeople);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createRoomType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.hotel = new Hotel();
          struct.hotel.read(iprot);
          struct.setHotelIsSet(true);
        }
        if (incoming.get(2)) {
          struct.roomRatePerDay = iprot.readDouble();
          struct.setRoomRatePerDayIsSet(true);
        }
        if (incoming.get(3)) {
          struct.maxNumberOfPeople = iprot.readI32();
          struct.setMaxNumberOfPeopleIsSet(true);
        }
      }
    }

  }

  public static class createRoomType_result implements org.apache.thrift.TBase<createRoomType_result, createRoomType_result._Fields>, java.io.Serializable, Cloneable, Comparable<createRoomType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createRoomType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createRoomType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createRoomType_resultTupleSchemeFactory());
    }

    public RoomType success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RoomType.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createRoomType_result.class, metaDataMap);
    }

    public createRoomType_result() {
    }

    public createRoomType_result(
      RoomType success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createRoomType_result(createRoomType_result other) {
      if (other.isSetSuccess()) {
        this.success = new RoomType(other.success);
      }
    }

    public createRoomType_result deepCopy() {
      return new createRoomType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RoomType getSuccess() {
      return this.success;
    }

    public createRoomType_result setSuccess(RoomType success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RoomType)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createRoomType_result)
        return this.equals((createRoomType_result)that);
      return false;
    }

    public boolean equals(createRoomType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(createRoomType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createRoomType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createRoomType_resultStandardSchemeFactory implements SchemeFactory {
      public createRoomType_resultStandardScheme getScheme() {
        return new createRoomType_resultStandardScheme();
      }
    }

    private static class createRoomType_resultStandardScheme extends StandardScheme<createRoomType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createRoomType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RoomType();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createRoomType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createRoomType_resultTupleSchemeFactory implements SchemeFactory {
      public createRoomType_resultTupleScheme getScheme() {
        return new createRoomType_resultTupleScheme();
      }
    }

    private static class createRoomType_resultTupleScheme extends TupleScheme<createRoomType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createRoomType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createRoomType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RoomType();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createGuest_args implements org.apache.thrift.TBase<createGuest_args, createGuest_args._Fields>, java.io.Serializable, Cloneable, Comparable<createGuest_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createGuest_args");

    private static final org.apache.thrift.protocol.TField FIRST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("firstName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SURNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("surname", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createGuest_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createGuest_argsTupleSchemeFactory());
    }

    public String firstName; // required
    public String surname; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FIRST_NAME((short)1, "firstName"),
      SURNAME((short)2, "surname");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FIRST_NAME
            return FIRST_NAME;
          case 2: // SURNAME
            return SURNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FIRST_NAME, new org.apache.thrift.meta_data.FieldMetaData("firstName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SURNAME, new org.apache.thrift.meta_data.FieldMetaData("surname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createGuest_args.class, metaDataMap);
    }

    public createGuest_args() {
    }

    public createGuest_args(
      String firstName,
      String surname)
    {
      this();
      this.firstName = firstName;
      this.surname = surname;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createGuest_args(createGuest_args other) {
      if (other.isSetFirstName()) {
        this.firstName = other.firstName;
      }
      if (other.isSetSurname()) {
        this.surname = other.surname;
      }
    }

    public createGuest_args deepCopy() {
      return new createGuest_args(this);
    }

    @Override
    public void clear() {
      this.firstName = null;
      this.surname = null;
    }

    public String getFirstName() {
      return this.firstName;
    }

    public createGuest_args setFirstName(String firstName) {
      this.firstName = firstName;
      return this;
    }

    public void unsetFirstName() {
      this.firstName = null;
    }

    /** Returns true if field firstName is set (has been assigned a value) and false otherwise */
    public boolean isSetFirstName() {
      return this.firstName != null;
    }

    public void setFirstNameIsSet(boolean value) {
      if (!value) {
        this.firstName = null;
      }
    }

    public String getSurname() {
      return this.surname;
    }

    public createGuest_args setSurname(String surname) {
      this.surname = surname;
      return this;
    }

    public void unsetSurname() {
      this.surname = null;
    }

    /** Returns true if field surname is set (has been assigned a value) and false otherwise */
    public boolean isSetSurname() {
      return this.surname != null;
    }

    public void setSurnameIsSet(boolean value) {
      if (!value) {
        this.surname = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FIRST_NAME:
        if (value == null) {
          unsetFirstName();
        } else {
          setFirstName((String)value);
        }
        break;

      case SURNAME:
        if (value == null) {
          unsetSurname();
        } else {
          setSurname((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FIRST_NAME:
        return getFirstName();

      case SURNAME:
        return getSurname();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FIRST_NAME:
        return isSetFirstName();
      case SURNAME:
        return isSetSurname();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createGuest_args)
        return this.equals((createGuest_args)that);
      return false;
    }

    public boolean equals(createGuest_args that) {
      if (that == null)
        return false;

      boolean this_present_firstName = true && this.isSetFirstName();
      boolean that_present_firstName = true && that.isSetFirstName();
      if (this_present_firstName || that_present_firstName) {
        if (!(this_present_firstName && that_present_firstName))
          return false;
        if (!this.firstName.equals(that.firstName))
          return false;
      }

      boolean this_present_surname = true && this.isSetSurname();
      boolean that_present_surname = true && that.isSetSurname();
      if (this_present_surname || that_present_surname) {
        if (!(this_present_surname && that_present_surname))
          return false;
        if (!this.surname.equals(that.surname))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_firstName = true && (isSetFirstName());
      list.add(present_firstName);
      if (present_firstName)
        list.add(firstName);

      boolean present_surname = true && (isSetSurname());
      list.add(present_surname);
      if (present_surname)
        list.add(surname);

      return list.hashCode();
    }

    @Override
    public int compareTo(createGuest_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFirstName()).compareTo(other.isSetFirstName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFirstName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstName, other.firstName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSurname()).compareTo(other.isSetSurname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSurname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.surname, other.surname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createGuest_args(");
      boolean first = true;

      sb.append("firstName:");
      if (this.firstName == null) {
        sb.append("null");
      } else {
        sb.append(this.firstName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("surname:");
      if (this.surname == null) {
        sb.append("null");
      } else {
        sb.append(this.surname);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createGuest_argsStandardSchemeFactory implements SchemeFactory {
      public createGuest_argsStandardScheme getScheme() {
        return new createGuest_argsStandardScheme();
      }
    }

    private static class createGuest_argsStandardScheme extends StandardScheme<createGuest_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createGuest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FIRST_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.firstName = iprot.readString();
                struct.setFirstNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SURNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.surname = iprot.readString();
                struct.setSurnameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createGuest_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.firstName != null) {
          oprot.writeFieldBegin(FIRST_NAME_FIELD_DESC);
          oprot.writeString(struct.firstName);
          oprot.writeFieldEnd();
        }
        if (struct.surname != null) {
          oprot.writeFieldBegin(SURNAME_FIELD_DESC);
          oprot.writeString(struct.surname);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createGuest_argsTupleSchemeFactory implements SchemeFactory {
      public createGuest_argsTupleScheme getScheme() {
        return new createGuest_argsTupleScheme();
      }
    }

    private static class createGuest_argsTupleScheme extends TupleScheme<createGuest_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createGuest_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFirstName()) {
          optionals.set(0);
        }
        if (struct.isSetSurname()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFirstName()) {
          oprot.writeString(struct.firstName);
        }
        if (struct.isSetSurname()) {
          oprot.writeString(struct.surname);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createGuest_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.firstName = iprot.readString();
          struct.setFirstNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.surname = iprot.readString();
          struct.setSurnameIsSet(true);
        }
      }
    }

  }

  public static class createGuest_result implements org.apache.thrift.TBase<createGuest_result, createGuest_result._Fields>, java.io.Serializable, Cloneable, Comparable<createGuest_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createGuest_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createGuest_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createGuest_resultTupleSchemeFactory());
    }

    public Guest success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Guest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createGuest_result.class, metaDataMap);
    }

    public createGuest_result() {
    }

    public createGuest_result(
      Guest success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createGuest_result(createGuest_result other) {
      if (other.isSetSuccess()) {
        this.success = new Guest(other.success);
      }
    }

    public createGuest_result deepCopy() {
      return new createGuest_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Guest getSuccess() {
      return this.success;
    }

    public createGuest_result setSuccess(Guest success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Guest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createGuest_result)
        return this.equals((createGuest_result)that);
      return false;
    }

    public boolean equals(createGuest_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(createGuest_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createGuest_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createGuest_resultStandardSchemeFactory implements SchemeFactory {
      public createGuest_resultStandardScheme getScheme() {
        return new createGuest_resultStandardScheme();
      }
    }

    private static class createGuest_resultStandardScheme extends StandardScheme<createGuest_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createGuest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Guest();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createGuest_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createGuest_resultTupleSchemeFactory implements SchemeFactory {
      public createGuest_resultTupleScheme getScheme() {
        return new createGuest_resultTupleScheme();
      }
    }

    private static class createGuest_resultTupleScheme extends TupleScheme<createGuest_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createGuest_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createGuest_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Guest();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findAvailableRoomsInLocation_args implements org.apache.thrift.TBase<findAvailableRoomsInLocation_args, findAvailableRoomsInLocation_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAvailableRoomsInLocation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAvailableRoomsInLocation_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAvailableRoomsInLocation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAvailableRoomsInLocation_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAvailableRoomsInLocation_args.class, metaDataMap);
    }

    public findAvailableRoomsInLocation_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAvailableRoomsInLocation_args(findAvailableRoomsInLocation_args other) {
    }

    public findAvailableRoomsInLocation_args deepCopy() {
      return new findAvailableRoomsInLocation_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAvailableRoomsInLocation_args)
        return this.equals((findAvailableRoomsInLocation_args)that);
      return false;
    }

    public boolean equals(findAvailableRoomsInLocation_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(findAvailableRoomsInLocation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAvailableRoomsInLocation_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAvailableRoomsInLocation_argsStandardSchemeFactory implements SchemeFactory {
      public findAvailableRoomsInLocation_argsStandardScheme getScheme() {
        return new findAvailableRoomsInLocation_argsStandardScheme();
      }
    }

    private static class findAvailableRoomsInLocation_argsStandardScheme extends StandardScheme<findAvailableRoomsInLocation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAvailableRoomsInLocation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAvailableRoomsInLocation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAvailableRoomsInLocation_argsTupleSchemeFactory implements SchemeFactory {
      public findAvailableRoomsInLocation_argsTupleScheme getScheme() {
        return new findAvailableRoomsInLocation_argsTupleScheme();
      }
    }

    private static class findAvailableRoomsInLocation_argsTupleScheme extends TupleScheme<findAvailableRoomsInLocation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAvailableRoomsInLocation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAvailableRoomsInLocation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findAvailableRoomsInLocation_result implements org.apache.thrift.TBase<findAvailableRoomsInLocation_result, findAvailableRoomsInLocation_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAvailableRoomsInLocation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAvailableRoomsInLocation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAvailableRoomsInLocation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAvailableRoomsInLocation_resultTupleSchemeFactory());
    }

    public List<RoomType> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RoomType.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAvailableRoomsInLocation_result.class, metaDataMap);
    }

    public findAvailableRoomsInLocation_result() {
    }

    public findAvailableRoomsInLocation_result(
      List<RoomType> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAvailableRoomsInLocation_result(findAvailableRoomsInLocation_result other) {
      if (other.isSetSuccess()) {
        List<RoomType> __this__success = new ArrayList<RoomType>(other.success.size());
        for (RoomType other_element : other.success) {
          __this__success.add(new RoomType(other_element));
        }
        this.success = __this__success;
      }
    }

    public findAvailableRoomsInLocation_result deepCopy() {
      return new findAvailableRoomsInLocation_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<RoomType> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(RoomType elem) {
      if (this.success == null) {
        this.success = new ArrayList<RoomType>();
      }
      this.success.add(elem);
    }

    public List<RoomType> getSuccess() {
      return this.success;
    }

    public findAvailableRoomsInLocation_result setSuccess(List<RoomType> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<RoomType>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAvailableRoomsInLocation_result)
        return this.equals((findAvailableRoomsInLocation_result)that);
      return false;
    }

    public boolean equals(findAvailableRoomsInLocation_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAvailableRoomsInLocation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAvailableRoomsInLocation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAvailableRoomsInLocation_resultStandardSchemeFactory implements SchemeFactory {
      public findAvailableRoomsInLocation_resultStandardScheme getScheme() {
        return new findAvailableRoomsInLocation_resultStandardScheme();
      }
    }

    private static class findAvailableRoomsInLocation_resultStandardScheme extends StandardScheme<findAvailableRoomsInLocation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAvailableRoomsInLocation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<RoomType>(_list0.size);
                  RoomType _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new RoomType();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAvailableRoomsInLocation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (RoomType _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAvailableRoomsInLocation_resultTupleSchemeFactory implements SchemeFactory {
      public findAvailableRoomsInLocation_resultTupleScheme getScheme() {
        return new findAvailableRoomsInLocation_resultTupleScheme();
      }
    }

    private static class findAvailableRoomsInLocation_resultTupleScheme extends TupleScheme<findAvailableRoomsInLocation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAvailableRoomsInLocation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (RoomType _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAvailableRoomsInLocation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<RoomType>(_list5.size);
            RoomType _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new RoomType();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
